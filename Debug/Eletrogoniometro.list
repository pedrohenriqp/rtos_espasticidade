
C:\Users\PedroHenriquePereira\Dropbox\Usp\TCC\Aplicacao\Eletrogoniometro\Debug\Eletrogoniometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004310  08004310  00014310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003e50  20000070  080044a8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003ec0  080044a8  00023ec0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001495e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002edd  00000000  00000000  000349fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005893  00000000  00000000  000378db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d0  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d48  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000583e  00000000  00000000  0003e888  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003fa5  00000000  00000000  000440c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004806b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e80  00000000  00000000  000480e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042f4 	.word	0x080042f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042f4 	.word	0x080042f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_InitTick+0x24>)
{
 8000bb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc0:	f000 fa8a 	bl	80010d8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fa50 	bl	8001070 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_Init>:
{
 8000bd8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x30>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000be2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bf2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 fa29 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff ffd8 	bl	8000bb0 <HAL_InitTick>
  HAL_MspInit();
 8000c00:	f002 f9fa 	bl	8002ff8 <HAL_MspInit>
}
 8000c04:	2000      	movs	r0, #0
 8000c06:	bd08      	pop	{r3, pc}
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000c0c:	4a02      	ldr	r2, [pc, #8]	; (8000c18 <HAL_IncTick+0xc>)
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20003dd8 	.word	0x20003dd8

08000c1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c1c:	4b01      	ldr	r3, [pc, #4]	; (8000c24 <HAL_GetTick+0x8>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20003dd8 	.word	0x20003dd8

08000c28 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c28:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	f000 809f 	beq.w	8000d70 <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c34:	b923      	cbnz	r3, 8000c40 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c36:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3c:	f002 fa0c 	bl	8003058 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c42:	06db      	lsls	r3, r3, #27
 8000c44:	f100 8092 	bmi.w	8000d6c <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c4e:	f023 0302 	bic.w	r3, r3, #2
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c58:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <HAL_ADC_Init+0x14c>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	6861      	ldr	r1, [r4, #4]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c6a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c6c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c7e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c80:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c82:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c86:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c8e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c90:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c9e:	4936      	ldr	r1, [pc, #216]	; (8000d78 <HAL_ADC_Init+0x150>)
 8000ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	d056      	beq.n	8000d54 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ca6:	6899      	ldr	r1, [r3, #8]
 8000ca8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000cac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000cae:	6899      	ldr	r1, [r3, #8]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cc2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cc4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cc6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cc8:	f022 0202 	bic.w	r2, r2, #2
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000cd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cd6:	6a22      	ldr	r2, [r4, #32]
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d043      	beq.n	8000d64 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cea:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cec:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000cf0:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cf4:	fab2 f182 	clz	r1, r2
 8000cf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cfa:	6858      	ldr	r0, [r3, #4]
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	408a      	lsls	r2, r1
 8000d00:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d06:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	3901      	subs	r1, #1
 8000d12:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d18:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000d28:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d2a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d2c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d34:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d36:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d38:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000d3c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000d52:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d62:	e7ae      	b.n	8000cc2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d6a:	e7ca      	b.n	8000d02 <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e7ed      	b.n	8000d4c <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8000d70:	2001      	movs	r0, #1
}
 8000d72:	bd10      	pop	{r4, pc}
 8000d74:	40012300 	.word	0x40012300
 8000d78:	0f000001 	.word	0x0f000001

08000d7c <HAL_ADC_Start>:
{
 8000d7c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000d82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d04e      	beq.n	8000e28 <HAL_ADC_Start+0xac>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d90:	6803      	ldr	r3, [r0, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	07d1      	lsls	r1, r2, #31
 8000d96:	d505      	bpl.n	8000da4 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	07d2      	lsls	r2, r2, #31
 8000d9c:	d414      	bmi.n	8000dc8 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000d9e:	2000      	movs	r0, #0
}
 8000da0:	b002      	add	sp, #8
 8000da2:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000da4:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000da6:	4921      	ldr	r1, [pc, #132]	; (8000e2c <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <HAL_ADC_Start+0xb4>)
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	fbb2 f2f1 	udiv	r2, r2, r1
 8000db6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000dba:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000dbc:	9a01      	ldr	r2, [sp, #4]
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d0ea      	beq.n	8000d98 <HAL_ADC_Start+0x1c>
      counter--;
 8000dc2:	9a01      	ldr	r2, [sp, #4]
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	e7f8      	b.n	8000dba <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dd6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ddc:	bf41      	itttt	mi
 8000dde:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000de0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000de4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000de8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000df0:	bf1c      	itt	ne
 8000df2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000df4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e04:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_ADC_Start+0xb8>)
 8000e08:	6852      	ldr	r2, [r2, #4]
 8000e0a:	06d2      	lsls	r2, r2, #27
 8000e0c:	d108      	bne.n	8000e20 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000e14:	d1c3      	bne.n	8000d9e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	e7bf      	b.n	8000da0 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <HAL_ADC_Start+0xbc>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d1bb      	bne.n	8000d9e <HAL_ADC_Start+0x22>
 8000e26:	e7f2      	b.n	8000e0e <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000e28:	2002      	movs	r0, #2
 8000e2a:	e7b9      	b.n	8000da0 <HAL_ADC_Start+0x24>
 8000e2c:	000f4240 	.word	0x000f4240
 8000e30:	20000004 	.word	0x20000004
 8000e34:	40012300 	.word	0x40012300
 8000e38:	40012000 	.word	0x40012000

08000e3c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000e3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d017      	beq.n	8000e74 <HAL_ADC_Stop+0x38>
 8000e44:	2301      	movs	r3, #1
 8000e46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8000e4a:	6803      	ldr	r3, [r0, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	07db      	lsls	r3, r3, #31
 8000e58:	d407      	bmi.n	8000e6a <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000e70:	4618      	mov	r0, r3
 8000e72:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000e74:	2002      	movs	r0, #2
}
 8000e76:	4770      	bx	lr

08000e78 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
{
 8000e7c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e7e:	0556      	lsls	r6, r2, #21
{
 8000e80:	4604      	mov	r4, r0
 8000e82:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e84:	d50b      	bpl.n	8000e9e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e86:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e88:	05d8      	lsls	r0, r3, #23
 8000e8a:	d508      	bpl.n	8000e9e <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000e94:	2300      	movs	r3, #0
 8000e96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000e9e:	f7ff febd 	bl	8000c1c <HAL_GetTick>
 8000ea2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	0792      	lsls	r2, r2, #30
 8000eaa:	d50c      	bpl.n	8000ec6 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eac:	f06f 0212 	mvn.w	r2, #18
 8000eb0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000ec0:	d013      	beq.n	8000eea <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ec6:	1c69      	adds	r1, r5, #1
 8000ec8:	d0ed      	beq.n	8000ea6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000eca:	b945      	cbnz	r5, 8000ede <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000eda:	2003      	movs	r0, #3
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ede:	f7ff fe9d 	bl	8000c1c <HAL_GetTick>
 8000ee2:	1b80      	subs	r0, r0, r6
 8000ee4:	4285      	cmp	r5, r0
 8000ee6:	d2dd      	bcs.n	8000ea4 <HAL_ADC_PollForConversion+0x2c>
 8000ee8:	e7f0      	b.n	8000ecc <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eea:	69a2      	ldr	r2, [r4, #24]
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d1e8      	bne.n	8000ec2 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000ef6:	d002      	beq.n	8000efe <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ef8:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	d4e1      	bmi.n	8000ec2 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f04:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000f08:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000f0c:	d1d9      	bne.n	8000ec2 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000f16:	bd70      	pop	{r4, r5, r6, pc}

08000f18 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f1c:	4770      	bx	lr
	...

08000f20 <HAL_ADC_ConfigChannel>:
{
 8000f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f000 8083 	beq.w	8001036 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f30:	680d      	ldr	r5, [r1, #0]
 8000f32:	6804      	ldr	r4, [r0, #0]
 8000f34:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000f36:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f38:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000f3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000f3e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f40:	d92a      	bls.n	8000f98 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f42:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000f46:	68e7      	ldr	r7, [r4, #12]
 8000f48:	3b1e      	subs	r3, #30
 8000f4a:	f04f 0e07 	mov.w	lr, #7
 8000f4e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f52:	ea27 070e 	bic.w	r7, r7, lr
 8000f56:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f58:	68e7      	ldr	r7, [r4, #12]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	433b      	orrs	r3, r7
 8000f60:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000f62:	684a      	ldr	r2, [r1, #4]
 8000f64:	2a06      	cmp	r2, #6
 8000f66:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000f6a:	d825      	bhi.n	8000fb8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000f70:	1f59      	subs	r1, r3, #5
 8000f72:	231f      	movs	r3, #31
 8000f74:	408b      	lsls	r3, r1
 8000f76:	ea27 0303 	bic.w	r3, r7, r3
 8000f7a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f7e:	fa06 f101 	lsl.w	r1, r6, r1
 8000f82:	4311      	orrs	r1, r2
 8000f84:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HAL_ADC_ConfigChannel+0x11c>)
 8000f88:	429c      	cmp	r4, r3
 8000f8a:	d034      	beq.n	8000ff6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000f92:	4618      	mov	r0, r3
}
 8000f94:	b003      	add	sp, #12
 8000f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f98:	6927      	ldr	r7, [r4, #16]
 8000f9a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000f9e:	f04f 0e07 	mov.w	lr, #7
 8000fa2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000fa6:	ea27 070e 	bic.w	r7, r7, lr
 8000faa:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fac:	6927      	ldr	r7, [r4, #16]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	433b      	orrs	r3, r7
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	e7d4      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000fb8:	2a0c      	cmp	r2, #12
 8000fba:	d80e      	bhi.n	8000fda <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fbc:	4413      	add	r3, r2
 8000fbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000fc0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000fc4:	231f      	movs	r3, #31
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	ea21 0303 	bic.w	r3, r1, r3
 8000fcc:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fd0:	fa06 f202 	lsl.w	r2, r6, r2
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	6322      	str	r2, [r4, #48]	; 0x30
 8000fd8:	e7d5      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000fda:	4413      	add	r3, r2
 8000fdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fde:	3b41      	subs	r3, #65	; 0x41
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	ea21 0202 	bic.w	r2, r1, r2
 8000fe8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fec:	fa06 f103 	lsl.w	r1, r6, r3
 8000ff0:	4311      	orrs	r1, r2
 8000ff2:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000ff4:	e7c7      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ff6:	2d12      	cmp	r5, #18
 8000ff8:	d104      	bne.n	8001004 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_ADC_ConfigChannel+0x120>)
 8000ffc:	6853      	ldr	r3, [r2, #4]
 8000ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001002:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001004:	f1a5 0310 	sub.w	r3, r5, #16
 8001008:	2b01      	cmp	r3, #1
 800100a:	d8bf      	bhi.n	8000f8c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <HAL_ADC_ConfigChannel+0x120>)
 800100e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001010:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001016:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001018:	d1b8      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_ADC_ConfigChannel+0x124>)
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_ADC_ConfigChannel+0x128>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fbb3 f2f2 	udiv	r2, r3, r2
 8001024:	230a      	movs	r3, #10
 8001026:	4353      	muls	r3, r2
        counter--;
 8001028:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ad      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001030:	9b01      	ldr	r3, [sp, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	e7f8      	b.n	8001028 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001036:	2002      	movs	r0, #2
 8001038:	e7ac      	b.n	8000f94 <HAL_ADC_ConfigChannel+0x74>
 800103a:	bf00      	nop
 800103c:	40012000 	.word	0x40012000
 8001040:	40012300 	.word	0x40012300
 8001044:	20000004 	.word	0x20000004
 8001048:	000f4240 	.word	0x000f4240

0800104c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800104e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001050:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	0c1b      	lsrs	r3, r3, #16
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800105c:	0200      	lsls	r0, r0, #8
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001066:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001068:	60d3      	str	r3, [r2, #12]
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b530      	push	{r4, r5, lr}
 8001074:	68dc      	ldr	r4, [r3, #12]
 8001076:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	2b04      	cmp	r3, #4
 8001082:	bf28      	it	cs
 8001084:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 0501 	mov.w	r5, #1
 800108c:	fa05 f303 	lsl.w	r3, r5, r3
 8001090:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001094:	bf8c      	ite	hi
 8001096:	3c03      	subhi	r4, #3
 8001098:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109a:	4019      	ands	r1, r3
 800109c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109e:	fa05 f404 	lsl.w	r4, r5, r4
 80010a2:	3c01      	subs	r4, #1
 80010a4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	ea42 0201 	orr.w	r2, r2, r1
 80010ac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	bfaf      	iteee	ge
 80010b2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	f000 000f 	andlt.w	r0, r0, #15
 80010ba:	4b06      	ldrlt	r3, [pc, #24]	; (80010d4 <HAL_NVIC_SetPriority+0x64>)
 80010bc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	bfa5      	ittet	ge
 80010c0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010c4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010cc:	bd30      	pop	{r4, r5, pc}
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00
 80010d4:	e000ed14 	.word	0xe000ed14

080010d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	3801      	subs	r0, #1
 80010da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010de:	d20a      	bcs.n	80010f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	21f0      	movs	r1, #240	; 0xf0
 80010e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001106:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001108:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800110a:	bf0c      	ite	eq
 800110c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001110:	f022 0204 	bicne.w	r2, r2, #4
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4770      	bx	lr
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001120:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80012c4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4a64      	ldr	r2, [pc, #400]	; (80012bc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800112c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001130:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001134:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001138:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800113c:	42b7      	cmp	r7, r6
 800113e:	f040 80ad 	bne.w	800129c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	684c      	ldr	r4, [r1, #4]
 8001144:	f024 0a10 	bic.w	sl, r4, #16
 8001148:	f1ba 0f02 	cmp.w	sl, #2
 800114c:	d116      	bne.n	800117c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800114e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001152:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800115a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001162:	f04f 0e0f 	mov.w	lr, #15
 8001166:	fa0e fe0b 	lsl.w	lr, lr, fp
 800116a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116e:	690d      	ldr	r5, [r1, #16]
 8001170:	fa05 f50b 	lsl.w	r5, r5, fp
 8001174:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001178:	f8cc 5020 	str.w	r5, [ip, #32]
 800117c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001180:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001182:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	fa05 f50c 	lsl.w	r5, r5, ip
 800118a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001190:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001198:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80011a6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	d815      	bhi.n	80011d8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80011ac:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b4:	68cd      	ldr	r5, [r1, #12]
 80011b6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80011ba:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80011be:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80011c2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ca:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80011ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80011d2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80011d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011da:	9d00      	ldr	r5, [sp, #0]
 80011dc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011de:	688f      	ldr	r7, [r1, #8]
 80011e0:	fa07 f70c 	lsl.w	r7, r7, ip
 80011e4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011e6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e8:	00e5      	lsls	r5, r4, #3
 80011ea:	d557      	bpl.n	800129c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	f04f 0b00 	mov.w	fp, #0
 80011f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80011f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f8:	4d31      	ldr	r5, [pc, #196]	; (80012c0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011fe:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001202:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001206:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800120a:	9703      	str	r7, [sp, #12]
 800120c:	9f03      	ldr	r7, [sp, #12]
 800120e:	f023 0703 	bic.w	r7, r3, #3
 8001212:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001216:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001222:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001226:	f04f 0e0f 	mov.w	lr, #15
 800122a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001234:	d039      	beq.n	80012aa <HAL_GPIO_Init+0x18e>
 8001236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800123a:	42a8      	cmp	r0, r5
 800123c:	d037      	beq.n	80012ae <HAL_GPIO_Init+0x192>
 800123e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001242:	42a8      	cmp	r0, r5
 8001244:	d035      	beq.n	80012b2 <HAL_GPIO_Init+0x196>
 8001246:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124a:	42a8      	cmp	r0, r5
 800124c:	d033      	beq.n	80012b6 <HAL_GPIO_Init+0x19a>
 800124e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001252:	42a8      	cmp	r0, r5
 8001254:	bf14      	ite	ne
 8001256:	2507      	movne	r5, #7
 8001258:	2504      	moveq	r5, #4
 800125a:	fa05 f50c 	lsl.w	r5, r5, ip
 800125e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001262:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001264:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001266:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800126c:	bf0c      	ite	eq
 800126e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001270:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001272:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001274:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001276:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800127a:	bf0c      	ite	eq
 800127c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800127e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001280:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001288:	bf0c      	ite	eq
 800128a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800128c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800128e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001292:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001294:	bf54      	ite	pl
 8001296:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001298:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800129a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129c:	3301      	adds	r3, #1
 800129e:	2b10      	cmp	r3, #16
 80012a0:	f47f af47 	bne.w	8001132 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012a4:	b005      	add	sp, #20
 80012a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	465d      	mov	r5, fp
 80012ac:	e7d5      	b.n	800125a <HAL_GPIO_Init+0x13e>
 80012ae:	2501      	movs	r5, #1
 80012b0:	e7d3      	b.n	800125a <HAL_GPIO_Init+0x13e>
 80012b2:	2502      	movs	r5, #2
 80012b4:	e7d1      	b.n	800125a <HAL_GPIO_Init+0x13e>
 80012b6:	2503      	movs	r5, #3
 80012b8:	e7cf      	b.n	800125a <HAL_GPIO_Init+0x13e>
 80012ba:	bf00      	nop
 80012bc:	40013c00 	.word	0x40013c00
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c8:	6803      	ldr	r3, [r0, #0]
{
 80012ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012cc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	07d8      	lsls	r0, r3, #31
 80012d0:	d43b      	bmi.n	800134a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	0799      	lsls	r1, r3, #30
 80012d6:	f100 8086 	bmi.w	80013e6 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	071e      	lsls	r6, r3, #28
 80012de:	f100 80d1 	bmi.w	8001484 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	075d      	lsls	r5, r3, #29
 80012e6:	d52a      	bpl.n	800133e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b8e      	ldr	r3, [pc, #568]	; (8001528 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80012ee:	4d8f      	ldr	r5, [pc, #572]	; (800152c <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800130a:	f7ff fc87 	bl	8000c1c <HAL_GetTick>
 800130e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	05da      	lsls	r2, r3, #23
 8001314:	f140 80d8 	bpl.w	80014c8 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	4d83      	ldr	r5, [pc, #524]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 800131c:	2b01      	cmp	r3, #1
 800131e:	f040 80da 	bne.w	80014d6 <HAL_RCC_OscConfig+0x20e>
 8001322:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fc77 	bl	8000c1c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132e:	4d7e      	ldr	r5, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001330:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001338:	079b      	lsls	r3, r3, #30
 800133a:	f140 80ed 	bpl.w	8001518 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133e:	69a2      	ldr	r2, [r4, #24]
 8001340:	2a00      	cmp	r2, #0
 8001342:	f040 80f9 	bne.w	8001538 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	4b77      	ldr	r3, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	f002 020c 	and.w	r2, r2, #12
 8001352:	2a04      	cmp	r2, #4
 8001354:	d007      	beq.n	8001366 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135c:	2a08      	cmp	r2, #8
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	025a      	lsls	r2, r3, #9
 8001364:	d509      	bpl.n	800137a <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	039b      	lsls	r3, r3, #14
 800136c:	d5b1      	bpl.n	80012d2 <HAL_RCC_OscConfig+0xa>
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1ae      	bne.n	80012d2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001374:	2001      	movs	r0, #1
}
 8001376:	b003      	add	sp, #12
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	4d6a      	ldr	r5, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 800137e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001382:	d111      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe0>
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800138c:	f7ff fc46 	bl	8000c1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	4d65      	ldr	r5, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001392:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	039f      	lsls	r7, r3, #14
 8001398:	d49b      	bmi.n	80012d2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139a:	f7ff fc3f 	bl	8000c1c <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	2864      	cmp	r0, #100	; 0x64
 80013a2:	d9f7      	bls.n	8001394 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80013a4:	2003      	movs	r0, #3
 80013a6:	e7e6      	b.n	8001376 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d104      	bne.n	80013b8 <HAL_RCC_OscConfig+0xf0>
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	602b      	str	r3, [r5, #0]
 80013b6:	e7e5      	b.n	8001384 <HAL_RCC_OscConfig+0xbc>
 80013b8:	682a      	ldr	r2, [r5, #0]
 80013ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013be:	602a      	str	r2, [r5, #0]
 80013c0:	682a      	ldr	r2, [r5, #0]
 80013c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013c6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1df      	bne.n	800138c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc26 	bl	8000c1c <HAL_GetTick>
 80013d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	0398      	lsls	r0, r3, #14
 80013d6:	f57f af7c 	bpl.w	80012d2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013da:	f7ff fc1f 	bl	8000c1c <HAL_GetTick>
 80013de:	1b80      	subs	r0, r0, r6
 80013e0:	2864      	cmp	r0, #100	; 0x64
 80013e2:	d9f6      	bls.n	80013d2 <HAL_RCC_OscConfig+0x10a>
 80013e4:	e7de      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	f012 0f0c 	tst.w	r2, #12
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2a08      	cmp	r2, #8
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	0259      	lsls	r1, r3, #9
 80013fe:	d413      	bmi.n	8001428 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001400:	4b49      	ldr	r3, [pc, #292]	; (8001528 <HAL_RCC_OscConfig+0x260>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	0792      	lsls	r2, r2, #30
 8001406:	d502      	bpl.n	800140e <HAL_RCC_OscConfig+0x146>
 8001408:	68e2      	ldr	r2, [r4, #12]
 800140a:	2a01      	cmp	r2, #1
 800140c:	d1b2      	bne.n	8001374 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	22f8      	movs	r2, #248	; 0xf8
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	fab2 f182 	clz	r1, r2
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	408a      	lsls	r2, r1
 800141e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e758      	b.n	80012da <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	68e2      	ldr	r2, [r4, #12]
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_OscConfig+0x268>)
 800142c:	b1da      	cbz	r2, 8001466 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001432:	f7ff fbf3 	bl	8000c1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4d3c      	ldr	r5, [pc, #240]	; (8001528 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8001438:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	079b      	lsls	r3, r3, #30
 800143e:	d50c      	bpl.n	800145a <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	6829      	ldr	r1, [r5, #0]
 8001442:	23f8      	movs	r3, #248	; 0xf8
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	fab3 f283 	clz	r2, r3
 800144c:	6923      	ldr	r3, [r4, #16]
 800144e:	4093      	lsls	r3, r2
 8001450:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001454:	4313      	orrs	r3, r2
 8001456:	602b      	str	r3, [r5, #0]
 8001458:	e73f      	b.n	80012da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fbdf 	bl	8000c1c <HAL_GetTick>
 800145e:	1b80      	subs	r0, r0, r6
 8001460:	2802      	cmp	r0, #2
 8001462:	d9ea      	bls.n	800143a <HAL_RCC_OscConfig+0x172>
 8001464:	e79e      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8001466:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001468:	f7ff fbd8 	bl	8000c1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	4d2e      	ldr	r5, [pc, #184]	; (8001528 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800146e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	079f      	lsls	r7, r3, #30
 8001474:	f57f af31 	bpl.w	80012da <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fbd0 	bl	8000c1c <HAL_GetTick>
 800147c:	1b80      	subs	r0, r0, r6
 800147e:	2802      	cmp	r0, #2
 8001480:	d9f6      	bls.n	8001470 <HAL_RCC_OscConfig+0x1a8>
 8001482:	e78f      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001484:	6962      	ldr	r2, [r4, #20]
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_OscConfig+0x26c>)
 8001488:	b17a      	cbz	r2, 80014aa <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800148e:	f7ff fbc5 	bl	8000c1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4d25      	ldr	r5, [pc, #148]	; (8001528 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8001494:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001498:	0798      	lsls	r0, r3, #30
 800149a:	f53f af22 	bmi.w	80012e2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fbbd 	bl	8000c1c <HAL_GetTick>
 80014a2:	1b80      	subs	r0, r0, r6
 80014a4:	2802      	cmp	r0, #2
 80014a6:	d9f6      	bls.n	8001496 <HAL_RCC_OscConfig+0x1ce>
 80014a8:	e77c      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80014aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014ac:	f7ff fbb6 	bl	8000c1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	4d1d      	ldr	r5, [pc, #116]	; (8001528 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80014b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014b6:	0799      	lsls	r1, r3, #30
 80014b8:	f57f af13 	bpl.w	80012e2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbae 	bl	8000c1c <HAL_GetTick>
 80014c0:	1b80      	subs	r0, r0, r6
 80014c2:	2802      	cmp	r0, #2
 80014c4:	d9f6      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1ec>
 80014c6:	e76d      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fba8 	bl	8000c1c <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	2802      	cmp	r0, #2
 80014d0:	f67f af1e 	bls.w	8001310 <HAL_RCC_OscConfig+0x48>
 80014d4:	e766      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d104      	bne.n	80014e4 <HAL_RCC_OscConfig+0x21c>
 80014da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	672b      	str	r3, [r5, #112]	; 0x70
 80014e2:	e71e      	b.n	8001322 <HAL_RCC_OscConfig+0x5a>
 80014e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	672a      	str	r2, [r5, #112]	; 0x70
 80014ec:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f47f af18 	bne.w	800132a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb8f 	bl	8000c1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001502:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001506:	0798      	lsls	r0, r3, #30
 8001508:	f57f af19 	bpl.w	800133e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fb86 	bl	8000c1c <HAL_GetTick>
 8001510:	1b80      	subs	r0, r0, r6
 8001512:	42b8      	cmp	r0, r7
 8001514:	d9f6      	bls.n	8001504 <HAL_RCC_OscConfig+0x23c>
 8001516:	e745      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fb80 	bl	8000c1c <HAL_GetTick>
 800151c:	1b80      	subs	r0, r0, r6
 800151e:	42b8      	cmp	r0, r7
 8001520:	f67f af09 	bls.w	8001336 <HAL_RCC_OscConfig+0x6e>
 8001524:	e73e      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001538:	4d2b      	ldr	r5, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x320>)
 800153a:	68ab      	ldr	r3, [r5, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	f43f af17 	beq.w	8001374 <HAL_RCC_OscConfig+0xac>
 8001546:	4e29      	ldr	r6, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x324>)
 8001548:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800154c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154e:	d13e      	bne.n	80015ce <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8001550:	f7ff fb64 	bl	8000c1c <HAL_GetTick>
 8001554:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	0199      	lsls	r1, r3, #6
 800155a:	d432      	bmi.n	80015c2 <HAL_RCC_OscConfig+0x2fa>
 800155c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001560:	fa97 f7a7 	rbit	r7, r7
 8001564:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001568:	fab7 f787 	clz	r7, r7
 800156c:	fa92 f2a2 	rbit	r2, r2
 8001570:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001574:	fab2 f082 	clz	r0, r2
 8001578:	fa91 f1a1 	rbit	r1, r1
 800157c:	6a22      	ldr	r2, [r4, #32]
 800157e:	69e3      	ldr	r3, [r4, #28]
 8001580:	4313      	orrs	r3, r2
 8001582:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001584:	fa02 f707 	lsl.w	r7, r2, r7
 8001588:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800158a:	0852      	lsrs	r2, r2, #1
 800158c:	3a01      	subs	r2, #1
 800158e:	4082      	lsls	r2, r0
 8001590:	433b      	orrs	r3, r7
 8001592:	4313      	orrs	r3, r2
 8001594:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4c14      	ldr	r4, [pc, #80]	; (80015e8 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001598:	fab1 f181 	clz	r1, r1
 800159c:	fa02 f101 	lsl.w	r1, r2, r1
 80015a0:	430b      	orrs	r3, r1
 80015a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015a4:	2301      	movs	r3, #1
 80015a6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb38 	bl	8000c1c <HAL_GetTick>
 80015ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	019a      	lsls	r2, r3, #6
 80015b2:	f53f aec8 	bmi.w	8001346 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fb31 	bl	8000c1c <HAL_GetTick>
 80015ba:	1b40      	subs	r0, r0, r5
 80015bc:	2802      	cmp	r0, #2
 80015be:	d9f6      	bls.n	80015ae <HAL_RCC_OscConfig+0x2e6>
 80015c0:	e6f0      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb2b 	bl	8000c1c <HAL_GetTick>
 80015c6:	1bc0      	subs	r0, r0, r7
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d9c4      	bls.n	8001556 <HAL_RCC_OscConfig+0x28e>
 80015cc:	e6ea      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb25 	bl	8000c1c <HAL_GetTick>
 80015d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	019b      	lsls	r3, r3, #6
 80015d8:	f57f aeb5 	bpl.w	8001346 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff fb1e 	bl	8000c1c <HAL_GetTick>
 80015e0:	1b00      	subs	r0, r0, r4
 80015e2:	2802      	cmp	r0, #2
 80015e4:	d9f6      	bls.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015e6:	e6dd      	b.n	80013a4 <HAL_RCC_OscConfig+0xdc>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470060 	.word	0x42470060

080015f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_RCC_GetSysClockFreq+0x68>)
 80015f2:	6893      	ldr	r3, [r2, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b04      	cmp	r3, #4
{
 80015fa:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fc:	d003      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x16>
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d003      	beq.n	800160a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001604:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <HAL_RCC_GetSysClockFreq+0x70>)
 8001608:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160a:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001612:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001616:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800161a:	6853      	ldr	r3, [r2, #4]
 800161c:	fa94 f0a4 	rbit	r0, r4
 8001620:	fab0 f080 	clz	r0, r0
 8001624:	ea03 0304 	and.w	r3, r3, r4
 8001628:	fa23 f300 	lsr.w	r3, r3, r0
 800162c:	bf14      	ite	ne
 800162e:	480c      	ldrne	r0, [pc, #48]	; (8001660 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001630:	480a      	ldreq	r0, [pc, #40]	; (800165c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001632:	fbb0 f0f1 	udiv	r0, r0, r1
 8001636:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_GetSysClockFreq+0x68>)
 800163a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	fa92 f2a2 	rbit	r2, r2
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164c:	40d3      	lsrs	r3, r2
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001652:	fbb0 f0f3 	udiv	r0, r0, r3
 8001656:	bd10      	pop	{r4, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	00f42400 	.word	0x00f42400
 8001660:	017d7840 	.word	0x017d7840

08001664 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001664:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_RCC_ClockConfig+0x15c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	f002 020f 	and.w	r2, r2, #15
 800166c:	428a      	cmp	r2, r1
{
 800166e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001672:	4605      	mov	r5, r0
 8001674:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001676:	d330      	bcc.n	80016da <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	682a      	ldr	r2, [r5, #0]
 800167a:	0794      	lsls	r4, r2, #30
 800167c:	d437      	bmi.n	80016ee <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	07d0      	lsls	r0, r2, #31
 8001680:	d43d      	bmi.n	80016fe <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_RCC_ClockConfig+0x15c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f002 020f 	and.w	r2, r2, #15
 800168a:	4296      	cmp	r6, r2
 800168c:	f0c0 8088 	bcc.w	80017a0 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	682a      	ldr	r2, [r5, #0]
 8001692:	0751      	lsls	r1, r2, #29
 8001694:	f100 808c 	bmi.w	80017b0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	0713      	lsls	r3, r2, #28
 800169a:	d507      	bpl.n	80016ac <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169c:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 800169e:	6929      	ldr	r1, [r5, #16]
 80016a0:	6893      	ldr	r3, [r2, #8]
 80016a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80016ac:	f7ff ffa0 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 80016b2:	22f0      	movs	r2, #240	; 0xf0
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c2:	40d3      	lsrs	r3, r2
 80016c4:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <HAL_RCC_ClockConfig+0x164>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	40d8      	lsrs	r0, r3
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_ClockConfig+0x168>)
 80016cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f7ff fa6e 	bl	8000bb0 <HAL_InitTick>
  return HAL_OK;
 80016d4:	2000      	movs	r0, #0
}
 80016d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	4299      	cmp	r1, r3
 80016e6:	d0c7      	beq.n	8001678 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
 80016ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ee:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 80016f0:	68a8      	ldr	r0, [r5, #8]
 80016f2:	688b      	ldr	r3, [r1, #8]
 80016f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016f8:	4303      	orrs	r3, r0
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e7bf      	b.n	800167e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	686a      	ldr	r2, [r5, #4]
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 8001702:	2a01      	cmp	r2, #1
 8001704:	d11e      	bne.n	8001744 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170c:	d0ec      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4c2d      	ldr	r4, [pc, #180]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	4313      	orrs	r3, r2
 8001718:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800171a:	f7ff fa7f 	bl	8000c1c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	686b      	ldr	r3, [r5, #4]
 8001720:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001722:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001728:	d116      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d0a6      	beq.n	8001682 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff fa72 	bl	8000c1c <HAL_GetTick>
 8001738:	1bc0      	subs	r0, r0, r7
 800173a:	4540      	cmp	r0, r8
 800173c:	d9f5      	bls.n	800172a <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001744:	1e91      	subs	r1, r2, #2
 8001746:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800174a:	d802      	bhi.n	8001752 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001750:	e7dc      	b.n	800170c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	f013 0f02 	tst.w	r3, #2
 8001756:	e7d9      	b.n	800170c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001758:	2b02      	cmp	r3, #2
 800175a:	d10a      	bne.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	68a3      	ldr	r3, [r4, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d08d      	beq.n	8001682 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7ff fa59 	bl	8000c1c <HAL_GetTick>
 800176a:	1bc0      	subs	r0, r0, r7
 800176c:	4540      	cmp	r0, r8
 800176e:	d9f5      	bls.n	800175c <HAL_RCC_ClockConfig+0xf8>
 8001770:	e7e5      	b.n	800173e <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001772:	2b03      	cmp	r3, #3
 8001774:	d10f      	bne.n	8001796 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001776:	68a3      	ldr	r3, [r4, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d080      	beq.n	8001682 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff fa4c 	bl	8000c1c <HAL_GetTick>
 8001784:	1bc0      	subs	r0, r0, r7
 8001786:	4540      	cmp	r0, r8
 8001788:	d9f5      	bls.n	8001776 <HAL_RCC_ClockConfig+0x112>
 800178a:	e7d8      	b.n	800173e <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7ff fa46 	bl	8000c1c <HAL_GetTick>
 8001790:	1bc0      	subs	r0, r0, r7
 8001792:	4540      	cmp	r0, r8
 8001794:	d8d3      	bhi.n	800173e <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	f013 0f0c 	tst.w	r3, #12
 800179c:	d1f6      	bne.n	800178c <HAL_RCC_ClockConfig+0x128>
 800179e:	e770      	b.n	8001682 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a0:	b2f2      	uxtb	r2, r6
 80017a2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	429e      	cmp	r6, r3
 80017ac:	d19c      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x84>
 80017ae:	e76f      	b.n	8001690 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <HAL_RCC_ClockConfig+0x160>)
 80017b2:	68e8      	ldr	r0, [r5, #12]
 80017b4:	688b      	ldr	r3, [r1, #8]
 80017b6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017ba:	4303      	orrs	r3, r0
 80017bc:	608b      	str	r3, [r1, #8]
 80017be:	e76b      	b.n	8001698 <HAL_RCC_ClockConfig+0x34>
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	080043d0 	.word	0x080043d0
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017d0:	4b01      	ldr	r3, [pc, #4]	; (80017d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80017f0:	40d3      	lsrs	r3, r2
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017f8:	6810      	ldr	r0, [r2, #0]
}
 80017fa:	40d8      	lsrs	r0, r3
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	080043e0 	.word	0x080043e0
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 800180e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	fa92 f2a2 	rbit	r2, r2
 8001818:	fab2 f282 	clz	r2, r2
 800181c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001820:	40d3      	lsrs	r3, r2
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001828:	6810      	ldr	r0, [r2, #0]
} 
 800182a:	40d8      	lsrs	r0, r3
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	080043e0 	.word	0x080043e0
 8001838:	20000004 	.word	0x20000004

0800183c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800183c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001840:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001842:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001844:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001846:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001848:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800184c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800184e:	6133      	str	r3, [r6, #16]
{
 8001850:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001852:	6883      	ldr	r3, [r0, #8]
 8001854:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001856:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001858:	4303      	orrs	r3, r0
 800185a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800185c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001860:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001862:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001866:	430b      	orrs	r3, r1
 8001868:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800186a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800186c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800186e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001874:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001876:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800187a:	6173      	str	r3, [r6, #20]
 800187c:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800187e:	d17c      	bne.n	800197a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001880:	429e      	cmp	r6, r3
 8001882:	d003      	beq.n	800188c <UART_SetConfig+0x50>
 8001884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001888:	429e      	cmp	r6, r3
 800188a:	d144      	bne.n	8001916 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800188c:	f7ff ffbe 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001890:	2519      	movs	r5, #25
 8001892:	fb05 f300 	mul.w	r3, r5, r0
 8001896:	6860      	ldr	r0, [r4, #4]
 8001898:	f04f 0964 	mov.w	r9, #100	; 0x64
 800189c:	0040      	lsls	r0, r0, #1
 800189e:	fbb3 f3f0 	udiv	r3, r3, r0
 80018a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80018a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80018aa:	f7ff ffaf 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	4368      	muls	r0, r5
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fbb0 f7f3 	udiv	r7, r0, r3
 80018b8:	f7ff ffa8 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	4368      	muls	r0, r5
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80018ca:	fb09 7313 	mls	r3, r9, r3, r7
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	3332      	adds	r3, #50	; 0x32
 80018d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80018dc:	f7ff ff96 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80018e0:	6862      	ldr	r2, [r4, #4]
 80018e2:	4368      	muls	r0, r5
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	fbb0 faf2 	udiv	sl, r0, r2
 80018ea:	f7ff ff8f 	bl	800180c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	4368      	muls	r0, r5
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80018fc:	fb09 a313 	mls	r3, r9, r3, sl
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	3332      	adds	r3, #50	; 0x32
 8001904:	fbb3 f3f9 	udiv	r3, r3, r9
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800190e:	443b      	add	r3, r7
 8001910:	60b3      	str	r3, [r6, #8]
 8001912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001916:	f7ff ff61 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 800191a:	2519      	movs	r5, #25
 800191c:	fb05 f300 	mul.w	r3, r5, r0
 8001920:	6860      	ldr	r0, [r4, #4]
 8001922:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001926:	0040      	lsls	r0, r0, #1
 8001928:	fbb3 f3f0 	udiv	r3, r3, r0
 800192c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001930:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001934:	f7ff ff52 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	4368      	muls	r0, r5
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001942:	f7ff ff4b 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001946:	6863      	ldr	r3, [r4, #4]
 8001948:	4368      	muls	r0, r5
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001950:	fbb3 f3f9 	udiv	r3, r3, r9
 8001954:	fb09 7313 	mls	r3, r9, r3, r7
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	3332      	adds	r3, #50	; 0x32
 800195c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001966:	f7ff ff39 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 800196a:	6862      	ldr	r2, [r4, #4]
 800196c:	4368      	muls	r0, r5
 800196e:	0052      	lsls	r2, r2, #1
 8001970:	fbb0 faf2 	udiv	sl, r0, r2
 8001974:	f7ff ff32 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001978:	e7b9      	b.n	80018ee <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800197a:	429e      	cmp	r6, r3
 800197c:	d002      	beq.n	8001984 <UART_SetConfig+0x148>
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <UART_SetConfig+0x230>)
 8001980:	429e      	cmp	r6, r3
 8001982:	d140      	bne.n	8001a06 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001984:	f7ff ff42 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001988:	6867      	ldr	r7, [r4, #4]
 800198a:	2519      	movs	r5, #25
 800198c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001990:	fb05 f300 	mul.w	r3, r5, r0
 8001994:	00bf      	lsls	r7, r7, #2
 8001996:	fbb3 f3f7 	udiv	r3, r3, r7
 800199a:	fbb3 f3f9 	udiv	r3, r3, r9
 800199e:	011f      	lsls	r7, r3, #4
 80019a0:	f7ff ff34 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80019a4:	6863      	ldr	r3, [r4, #4]
 80019a6:	4368      	muls	r0, r5
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fbb0 f8f3 	udiv	r8, r0, r3
 80019ae:	f7ff ff2d 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80019b2:	6863      	ldr	r3, [r4, #4]
 80019b4:	4368      	muls	r0, r5
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80019c0:	fb09 8313 	mls	r3, r9, r3, r8
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	3332      	adds	r3, #50	; 0x32
 80019c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019cc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80019d0:	f7ff ff1c 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 80019d4:	6862      	ldr	r2, [r4, #4]
 80019d6:	4368      	muls	r0, r5
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	fbb0 faf2 	udiv	sl, r0, r2
 80019de:	f7ff ff15 	bl	800180c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	4368      	muls	r0, r5
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80019f0:	fb09 a313 	mls	r3, r9, r3, sl
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	3332      	adds	r3, #50	; 0x32
 80019f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	ea43 0308 	orr.w	r3, r3, r8
 8001a04:	e783      	b.n	800190e <UART_SetConfig+0xd2>
 8001a06:	f7ff fee9 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a0a:	6867      	ldr	r7, [r4, #4]
 8001a0c:	2519      	movs	r5, #25
 8001a0e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a12:	fb05 f300 	mul.w	r3, r5, r0
 8001a16:	00bf      	lsls	r7, r7, #2
 8001a18:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a20:	011f      	lsls	r7, r3, #4
 8001a22:	f7ff fedb 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a26:	6863      	ldr	r3, [r4, #4]
 8001a28:	4368      	muls	r0, r5
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a30:	f7ff fed4 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a34:	6863      	ldr	r3, [r4, #4]
 8001a36:	4368      	muls	r0, r5
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a42:	fb09 8313 	mls	r3, r9, r3, r8
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	3332      	adds	r3, #50	; 0x32
 8001a4a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a4e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a52:	f7ff fec3 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a56:	6862      	ldr	r2, [r4, #4]
 8001a58:	4368      	muls	r0, r5
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	fbb0 faf2 	udiv	sl, r0, r2
 8001a60:	f7ff febc 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a64:	e7bd      	b.n	80019e2 <UART_SetConfig+0x1a6>
 8001a66:	bf00      	nop
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400

08001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	4604      	mov	r4, r0
 8001a74:	460e      	mov	r6, r1
 8001a76:	4617      	mov	r7, r2
 8001a78:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001a7a:	6821      	ldr	r1, [r4, #0]
 8001a7c:	680b      	ldr	r3, [r1, #0]
 8001a7e:	ea36 0303 	bics.w	r3, r6, r3
 8001a82:	d101      	bne.n	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001a84:	2000      	movs	r0, #0
}
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a88:	1c6b      	adds	r3, r5, #1
 8001a8a:	d0f7      	beq.n	8001a7c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a8c:	b995      	cbnz	r5, 8001ab4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001aa6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ab4:	f7ff f8b2 	bl	8000c1c <HAL_GetTick>
 8001ab8:	1bc0      	subs	r0, r0, r7
 8001aba:	4285      	cmp	r5, r0
 8001abc:	d2dd      	bcs.n	8001a7a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001abe:	e7e6      	b.n	8001a8e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001ac0 <HAL_UART_Init>:
{
 8001ac0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	b340      	cbz	r0, 8001b18 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ac6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ace:	b91b      	cbnz	r3, 8001ad8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ad0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ad4:	f001 fae2 	bl	800309c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ad8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ada:	2324      	movs	r3, #36	; 0x24
 8001adc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ae0:	68d3      	ldr	r3, [r2, #12]
 8001ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ae6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff fea7 	bl	800183c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001afe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b06:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b08:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b0a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b12:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
}
 8001b1a:	bd10      	pop	{r4, pc}

08001b1c <HAL_UART_Transmit>:
{
 8001b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b20:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001b22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b26:	2b20      	cmp	r3, #32
{
 8001b28:	4604      	mov	r4, r0
 8001b2a:	460d      	mov	r5, r1
 8001b2c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001b2e:	d14f      	bne.n	8001bd0 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001b30:	2900      	cmp	r1, #0
 8001b32:	d04a      	beq.n	8001bca <HAL_UART_Transmit+0xae>
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d048      	beq.n	8001bca <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001b38:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d047      	beq.n	8001bd0 <HAL_UART_Transmit+0xb4>
 8001b40:	2301      	movs	r3, #1
 8001b42:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	2321      	movs	r3, #33	; 0x21
 8001b4c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001b50:	f7ff f864 	bl	8000c1c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001b54:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001b58:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001b5a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001b5e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b96b      	cbnz	r3, 8001b80 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4632      	mov	r2, r6
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff ff80 	bl	8001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b70:	b9b0      	cbnz	r0, 8001ba0 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001b72:	2320      	movs	r3, #32
 8001b74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001b78:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001b80:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b88:	68a3      	ldr	r3, [r4, #8]
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b8e:	4632      	mov	r2, r6
 8001b90:	463b      	mov	r3, r7
 8001b92:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001b96:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b98:	d10e      	bne.n	8001bb8 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9a:	f7ff ff69 	bl	8001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b9e:	b110      	cbz	r0, 8001ba6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ba6:	882b      	ldrh	r3, [r5, #0]
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bae:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001bb0:	6923      	ldr	r3, [r4, #16]
 8001bb2:	b943      	cbnz	r3, 8001bc6 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001bb4:	3502      	adds	r5, #2
 8001bb6:	e7d2      	b.n	8001b5e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb8:	f7ff ff5a 	bl	8001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1ef      	bne.n	8001ba0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	782a      	ldrb	r2, [r5, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	3501      	adds	r5, #1
 8001bc8:	e7c9      	b.n	8001b5e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001bca:	2001      	movs	r0, #1
 8001bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001bd0:	2002      	movs	r0, #2
}
 8001bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bd6 <HAL_UART_Receive>:
{ 
 8001bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bda:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001bdc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001be0:	2b20      	cmp	r3, #32
{ 
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001be8:	d152      	bne.n	8001c90 <HAL_UART_Receive+0xba>
    if((pData == NULL ) || (Size == 0)) 
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d04d      	beq.n	8001c8a <HAL_UART_Receive+0xb4>
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d04b      	beq.n	8001c8a <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 8001bf2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d04a      	beq.n	8001c90 <HAL_UART_Receive+0xba>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c04:	2322      	movs	r3, #34	; 0x22
 8001c06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001c0a:	f7ff f807 	bl	8000c1c <HAL_GetTick>
    huart->RxXferSize = Size; 
 8001c0e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8001c12:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001c14:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001c18:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001c1a:	b280      	uxth	r0, r0
 8001c1c:	b930      	cbnz	r0, 8001c2c <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001c24:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001c2c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c34:	68a3      	ldr	r3, [r4, #8]
 8001c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c3a:	4632      	mov	r2, r6
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	f04f 0120 	mov.w	r1, #32
 8001c42:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c44:	d112      	bne.n	8001c6c <HAL_UART_Receive+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c46:	f7ff ff13 	bl	8001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c4a:	b110      	cbz	r0, 8001c52 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c52:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c54:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c56:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c58:	b922      	cbnz	r2, 8001c64 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5e:	f825 3b02 	strh.w	r3, [r5], #2
 8001c62:	e7d9      	b.n	8001c18 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f825 3b01 	strh.w	r3, [r5], #1
 8001c6a:	e7d5      	b.n	8001c18 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6c:	f7ff ff00 	bl	8001a70 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d1eb      	bne.n	8001c4c <HAL_UART_Receive+0x76>
 8001c74:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c76:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	1c6a      	adds	r2, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c7c:	b911      	cbnz	r1, 8001c84 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c7e:	702b      	strb	r3, [r5, #0]
 8001c80:	4615      	mov	r5, r2
 8001c82:	e7c9      	b.n	8001c18 <HAL_UART_Receive+0x42>
 8001c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c88:	e7f9      	b.n	8001c7e <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;   
 8001c90:	2002      	movs	r0, #2
}
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c96:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c98:	f000 fbe6 	bl	8002468 <vTaskStartScheduler>
  
  return osOK;
}
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	bd08      	pop	{r3, pc}

08001ca0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ca0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ca2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001ca6:	8a02      	ldrh	r2, [r0, #16]
{
 8001ca8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001caa:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001cae:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001cb0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001cb2:	bf14      	ite	ne
 8001cb4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001cb6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb8:	a803      	add	r0, sp, #12
 8001cba:	9001      	str	r0, [sp, #4]
 8001cbc:	9400      	str	r4, [sp, #0]
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f000 fb02 	bl	80022c8 <xTaskCreate>
 8001cc4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cc6:	bf0c      	ite	eq
 8001cc8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001cca:	2000      	movne	r0, #0
}
 8001ccc:	b005      	add	sp, #20
 8001cce:	bd30      	pop	{r4, r5, pc}

08001cd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cd0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	bf08      	it	eq
 8001cd6:	2001      	moveq	r0, #1
 8001cd8:	f000 fd14 	bl	8002704 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cdc:	2000      	movs	r0, #0
 8001cde:	bd08      	pop	{r3, pc}

08001ce0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001ce0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ce2:	f000 fda7 	bl	8002834 <xTaskGetSchedulerState>
 8001ce6:	2801      	cmp	r0, #1
 8001ce8:	d003      	beq.n	8001cf2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001cee:	f000 b909 	b.w	8001f04 <xPortSysTickHandler>
 8001cf2:	bd08      	pop	{r3, pc}

08001cf4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf4:	f100 0308 	add.w	r3, r0, #8
 8001cf8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d00:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d02:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d04:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d06:	6003      	str	r3, [r0, #0]
 8001d08:	4770      	bx	lr

08001d0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6103      	str	r3, [r0, #16]
 8001d0e:	4770      	bx	lr

08001d10 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d10:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d12:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d1c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d1e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d20:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d22:	3301      	adds	r3, #1
 8001d24:	6003      	str	r3, [r0, #0]
 8001d26:	4770      	bx	lr

08001d28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d28:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d2a:	1c53      	adds	r3, r2, #1
{
 8001d2c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001d2e:	d10a      	bne.n	8001d46 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d30:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d36:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d38:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d3a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d3c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d3e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d40:	3301      	adds	r3, #1
 8001d42:	6003      	str	r3, [r0, #0]
 8001d44:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d46:	f100 0308 	add.w	r3, r0, #8
 8001d4a:	685c      	ldr	r4, [r3, #4]
 8001d4c:	6825      	ldr	r5, [r4, #0]
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d3ef      	bcc.n	8001d32 <vListInsert+0xa>
 8001d52:	4623      	mov	r3, r4
 8001d54:	e7f9      	b.n	8001d4a <vListInsert+0x22>

08001d56 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d56:	6841      	ldr	r1, [r0, #4]
 8001d58:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d5a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d5c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d5e:	6882      	ldr	r2, [r0, #8]
 8001d60:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d66:	bf08      	it	eq
 8001d68:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	3801      	subs	r0, #1
 8001d72:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001d74:	4770      	bx	lr
	...

08001d78 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <prvTaskExitError+0x2c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	d008      	beq.n	8001d92 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	e7fe      	b.n	8001d90 <prvTaskExitError+0x18>
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	e7fe      	b.n	8001da2 <prvTaskExitError+0x2a>
 8001da4:	20000000 	.word	0x20000000

08001da8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <prvPortStartFirstTask+0x1c>)
 8001daa:	6800      	ldr	r0, [r0, #0]
 8001dac:	6800      	ldr	r0, [r0, #0]
 8001dae:	f380 8808 	msr	MSP, r0
 8001db2:	b662      	cpsie	i
 8001db4:	b661      	cpsie	f
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	df00      	svc	0
 8001dc0:	bf00      	nop
 8001dc2:	0000      	.short	0x0000
 8001dc4:	e000ed08 	.word	0xe000ed08

08001dc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001dc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001dd8 <vPortEnableVFP+0x10>
 8001dcc:	6801      	ldr	r1, [r0, #0]
 8001dce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001dd2:	6001      	str	r1, [r0, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	0000      	.short	0x0000
 8001dd8:	e000ed88 	.word	0xe000ed88

08001ddc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <pxPortInitialiseStack+0x28>)
 8001de6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001dea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001dee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001df2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001df6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001dfa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001dfe:	3844      	subs	r0, #68	; 0x44
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	08001d79 	.word	0x08001d79
	...

08001e10 <SVC_Handler>:
	__asm volatile (
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <pxCurrentTCBConst2>)
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6808      	ldr	r0, [r1, #0]
 8001e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1a:	f380 8809 	msr	PSP, r0
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f380 8811 	msr	BASEPRI, r0
 8001e2a:	4770      	bx	lr
 8001e2c:	f3af 8000 	nop.w

08001e30 <pxCurrentTCBConst2>:
 8001e30:	20003cac 	.word	0x20003cac

08001e34 <vPortEnterCritical>:
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <vPortEnterCritical+0x3c>)
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001e4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001e4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e4e:	d10d      	bne.n	8001e6c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <vPortEnterCritical+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e58:	d008      	beq.n	8001e6c <vPortEnterCritical+0x38>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <vPortEnterCritical+0x36>
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <vPortExitCritical+0x24>)
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	b943      	cbnz	r3, 8001e90 <vPortExitCritical+0x18>
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	e7fe      	b.n	8001e8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001e90:	3b01      	subs	r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e94:	b90b      	cbnz	r3, 8001e9a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e96:	f383 8811 	msr	BASEPRI, r3
 8001e9a:	4770      	bx	lr
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <PendSV_Handler>:
	__asm volatile
 8001ea0:	f3ef 8009 	mrs	r0, PSP
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <pxCurrentTCBConst>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f01e 0f10 	tst.w	lr, #16
 8001eb0:	bf08      	it	eq
 8001eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eba:	6010      	str	r0, [r2, #0]
 8001ebc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ec4:	f380 8811 	msr	BASEPRI, r0
 8001ec8:	f3bf 8f4f 	dsb	sy
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f000 fc76 	bl	80027c0 <vTaskSwitchContext>
 8001ed4:	f04f 0000 	mov.w	r0, #0
 8001ed8:	f380 8811 	msr	BASEPRI, r0
 8001edc:	bc08      	pop	{r3}
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	6808      	ldr	r0, [r1, #0]
 8001ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee6:	f01e 0f10 	tst.w	lr, #16
 8001eea:	bf08      	it	eq
 8001eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001ef0:	f380 8809 	msr	PSP, r0
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w

08001f00 <pxCurrentTCBConst>:
 8001f00:	20003cac 	.word	0x20003cac

08001f04 <xPortSysTickHandler>:
{
 8001f04:	b508      	push	{r3, lr}
	__asm volatile
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001f16:	f000 faeb 	bl	80024f0 <xTaskIncrementTick>
 8001f1a:	b118      	cbz	r0, 8001f24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <xPortSysTickHandler+0x28>)
 8001f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001f24:	2300      	movs	r3, #0
 8001f26:	f383 8811 	msr	BASEPRI, r3
 8001f2a:	bd08      	pop	{r3, pc}
 8001f2c:	e000ed04 	.word	0xe000ed04

08001f30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <vPortSetupTimerInterrupt+0x1c>)
 8001f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <vPortSetupTimerInterrupt+0x20>)
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <vPortSetupTimerInterrupt+0x24>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	e000e014 	.word	0xe000e014
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <xPortStartScheduler+0xc8>)
 8001f5a:	4a32      	ldr	r2, [pc, #200]	; (8002024 <xPortStartScheduler+0xcc>)
{
 8001f5c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	4291      	cmp	r1, r2
 8001f62:	d108      	bne.n	8001f76 <xPortStartScheduler+0x1e>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	e7fe      	b.n	8001f74 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <xPortStartScheduler+0xd0>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d108      	bne.n	8001f90 <xPortStartScheduler+0x38>
 8001f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	e7fe      	b.n	8001f8e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <xPortStartScheduler+0xd4>)
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f9c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f9e:	4a24      	ldr	r2, [pc, #144]	; (8002030 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fa6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001faa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <xPortStartScheduler+0xdc>)
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001fbc:	0600      	lsls	r0, r0, #24
 8001fbe:	f102 34ff 	add.w	r4, r2, #4294967295
 8001fc2:	d423      	bmi.n	800200c <xPortStartScheduler+0xb4>
 8001fc4:	b101      	cbz	r1, 8001fc8 <xPortStartScheduler+0x70>
 8001fc6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001fcc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001fd0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <xPortStartScheduler+0xd4>)
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <xPortStartScheduler+0xe0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001fe2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001fea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001fec:	f7ff ffa0 	bl	8001f30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <xPortStartScheduler+0xe4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001ff6:	f7ff fee7 	bl	8001dc8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <xPortStartScheduler+0xe8>)
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002002:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002004:	f7ff fed0 	bl	8001da8 <prvPortStartFirstTask>
	prvTaskExitError();
 8002008:	f7ff feb6 	bl	8001d78 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800200c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002010:	0052      	lsls	r2, r2, #1
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f88d 2003 	strb.w	r2, [sp, #3]
 8002018:	2101      	movs	r1, #1
 800201a:	4622      	mov	r2, r4
 800201c:	e7cc      	b.n	8001fb8 <xPortStartScheduler+0x60>
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	410fc271 	.word	0x410fc271
 8002028:	410fc270 	.word	0x410fc270
 800202c:	e000e400 	.word	0xe000e400
 8002030:	2000008c 	.word	0x2000008c
 8002034:	20000090 	.word	0x20000090
 8002038:	e000ed20 	.word	0xe000ed20
 800203c:	20000000 	.word	0x20000000
 8002040:	e000ef34 	.word	0xe000ef34

08002044 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002044:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <prvInsertBlockIntoFreeList+0x40>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4282      	cmp	r2, r0
 800204c:	d318      	bcc.n	8002080 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800204e:	685c      	ldr	r4, [r3, #4]
 8002050:	1919      	adds	r1, r3, r4
 8002052:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002054:	bf01      	itttt	eq
 8002056:	6841      	ldreq	r1, [r0, #4]
 8002058:	4618      	moveq	r0, r3
 800205a:	1909      	addeq	r1, r1, r4
 800205c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800205e:	6844      	ldr	r4, [r0, #4]
 8002060:	1901      	adds	r1, r0, r4
 8002062:	428a      	cmp	r2, r1
 8002064:	d107      	bne.n	8002076 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <prvInsertBlockIntoFreeList+0x44>)
 8002068:	6809      	ldr	r1, [r1, #0]
 800206a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800206c:	bf1f      	itttt	ne
 800206e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002070:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002072:	1909      	addne	r1, r1, r4
 8002074:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002076:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002078:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800207a:	bf18      	it	ne
 800207c:	6018      	strne	r0, [r3, #0]
 800207e:	bd10      	pop	{r4, pc}
 8002080:	4613      	mov	r3, r2
 8002082:	e7e1      	b.n	8002048 <prvInsertBlockIntoFreeList+0x4>
 8002084:	20003ca4 	.word	0x20003ca4
 8002088:	20000094 	.word	0x20000094

0800208c <pvPortMalloc>:
{
 800208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002090:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002092:	f000 fa25 	bl	80024e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002096:	493e      	ldr	r1, [pc, #248]	; (8002190 <pvPortMalloc+0x104>)
 8002098:	4d3e      	ldr	r5, [pc, #248]	; (8002194 <pvPortMalloc+0x108>)
 800209a:	680b      	ldr	r3, [r1, #0]
 800209c:	bb0b      	cbnz	r3, 80020e2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800209e:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020a0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020a2:	bf1f      	itttt	ne
 80020a4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020a6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020aa:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80020ae:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020b0:	bf14      	ite	ne
 80020b2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020b4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80020ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020bc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020c0:	4e36      	ldr	r6, [pc, #216]	; (800219c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80020c2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020c4:	2000      	movs	r0, #0
 80020c6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020c8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80020ca:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80020cc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020ce:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020d0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020d4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020d6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <pvPortMalloc+0x118>)
 80020da:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020e0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020e2:	682f      	ldr	r7, [r5, #0]
 80020e4:	4227      	tst	r7, r4
 80020e6:	d116      	bne.n	8002116 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80020e8:	2c00      	cmp	r4, #0
 80020ea:	d041      	beq.n	8002170 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80020ec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020f0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020f2:	bf1c      	itt	ne
 80020f4:	f023 0307 	bicne.w	r3, r3, #7
 80020f8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020fa:	b163      	cbz	r3, 8002116 <pvPortMalloc+0x8a>
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <pvPortMalloc+0x118>)
 80020fe:	6816      	ldr	r6, [r2, #0]
 8002100:	42b3      	cmp	r3, r6
 8002102:	4690      	mov	r8, r2
 8002104:	d807      	bhi.n	8002116 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <pvPortMalloc+0x110>)
 8002108:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800210a:	6868      	ldr	r0, [r5, #4]
 800210c:	4283      	cmp	r3, r0
 800210e:	d804      	bhi.n	800211a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002110:	6809      	ldr	r1, [r1, #0]
 8002112:	428d      	cmp	r5, r1
 8002114:	d107      	bne.n	8002126 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002116:	2400      	movs	r4, #0
 8002118:	e02a      	b.n	8002170 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800211a:	682c      	ldr	r4, [r5, #0]
 800211c:	2c00      	cmp	r4, #0
 800211e:	d0f7      	beq.n	8002110 <pvPortMalloc+0x84>
 8002120:	462a      	mov	r2, r5
 8002122:	4625      	mov	r5, r4
 8002124:	e7f1      	b.n	800210a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002126:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002128:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800212a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800212c:	1ac2      	subs	r2, r0, r3
 800212e:	2a10      	cmp	r2, #16
 8002130:	d90f      	bls.n	8002152 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002132:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002134:	0741      	lsls	r1, r0, #29
 8002136:	d008      	beq.n	800214a <pvPortMalloc+0xbe>
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	e7fe      	b.n	8002148 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800214a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800214c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800214e:	f7ff ff79 	bl	8002044 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002152:	4913      	ldr	r1, [pc, #76]	; (80021a0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002154:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002156:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002158:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800215a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800215c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800215e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002162:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002166:	bf38      	it	cc
 8002168:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800216a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800216c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800216e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002170:	f000 fa50 	bl	8002614 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002174:	0763      	lsls	r3, r4, #29
 8002176:	d008      	beq.n	800218a <pvPortMalloc+0xfe>
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	e7fe      	b.n	8002188 <pvPortMalloc+0xfc>
}
 800218a:	4620      	mov	r0, r4
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002190:	20000094 	.word	0x20000094
 8002194:	20003c98 	.word	0x20003c98
 8002198:	20000098 	.word	0x20000098
 800219c:	20003ca4 	.word	0x20003ca4
 80021a0:	20003ca0 	.word	0x20003ca0
 80021a4:	20003c9c 	.word	0x20003c9c

080021a8 <vPortFree>:
{
 80021a8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80021aa:	4604      	mov	r4, r0
 80021ac:	b370      	cbz	r0, 800220c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <vPortFree+0x68>)
 80021b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	4213      	tst	r3, r2
 80021b8:	d108      	bne.n	80021cc <vPortFree+0x24>
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	e7fe      	b.n	80021ca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80021cc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80021d0:	b141      	cbz	r1, 80021e4 <vPortFree+0x3c>
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	e7fe      	b.n	80021e2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80021e4:	ea23 0302 	bic.w	r3, r3, r2
 80021e8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80021ec:	f000 f978 	bl	80024e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <vPortFree+0x6c>)
 80021f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80021f6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021f8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80021fc:	440b      	add	r3, r1
 80021fe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002200:	f7ff ff20 	bl	8002044 <prvInsertBlockIntoFreeList>
}
 8002204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002208:	f000 ba04 	b.w	8002614 <xTaskResumeAll>
 800220c:	bd10      	pop	{r4, pc}
 800220e:	bf00      	nop
 8002210:	20003c98 	.word	0x20003c98
 8002214:	20003c9c 	.word	0x20003c9c

08002218 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <prvResetNextTaskUnblockTime+0x1c>)
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <prvResetNextTaskUnblockTime+0x20>)
 8002220:	b919      	cbnz	r1, 800222a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002222:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800222e:	68d2      	ldr	r2, [r2, #12]
 8002230:	6852      	ldr	r2, [r2, #4]
 8002232:	e7f8      	b.n	8002226 <prvResetNextTaskUnblockTime+0xe>
 8002234:	20003cb0 	.word	0x20003cb0
 8002238:	20003d88 	.word	0x20003d88

0800223c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002240:	4e1b      	ldr	r6, [pc, #108]	; (80022b0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002242:	681d      	ldr	r5, [r3, #0]
{
 8002244:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002246:	6830      	ldr	r0, [r6, #0]
 8002248:	3004      	adds	r0, #4
{
 800224a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800224c:	f7ff fd83 	bl	8001d56 <uxListRemove>
 8002250:	4633      	mov	r3, r6
 8002252:	b940      	cbnz	r0, 8002266 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002254:	6831      	ldr	r1, [r6, #0]
 8002256:	4e17      	ldr	r6, [pc, #92]	; (80022b4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002258:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800225a:	6832      	ldr	r2, [r6, #0]
 800225c:	2001      	movs	r0, #1
 800225e:	4088      	lsls	r0, r1
 8002260:	ea22 0200 	bic.w	r2, r2, r0
 8002264:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002266:	1c62      	adds	r2, r4, #1
 8002268:	d107      	bne.n	800227a <prvAddCurrentTaskToDelayedList+0x3e>
 800226a:	b137      	cbz	r7, 800227a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	4812      	ldr	r0, [pc, #72]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002270:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002276:	f7ff bd4b 	b.w	8001d10 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800227a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800227c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800227e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002280:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002282:	d907      	bls.n	8002294 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <prvAddCurrentTaskToDelayedList+0x80>)
 8002286:	6810      	ldr	r0, [r2, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
}
 800228a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800228e:	3104      	adds	r1, #4
 8002290:	f7ff bd4a 	b.w	8001d28 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002296:	6810      	ldr	r0, [r2, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	3104      	adds	r1, #4
 800229c:	f7ff fd44 	bl	8001d28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <prvAddCurrentTaskToDelayedList+0x88>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80022a6:	bf38      	it	cc
 80022a8:	601c      	strcc	r4, [r3, #0]
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ac:	20003dd0 	.word	0x20003dd0
 80022b0:	20003cac 	.word	0x20003cac
 80022b4:	20003d58 	.word	0x20003d58
 80022b8:	20003da8 	.word	0x20003da8
 80022bc:	20003cb4 	.word	0x20003cb4
 80022c0:	20003cb0 	.word	0x20003cb0
 80022c4:	20003d88 	.word	0x20003d88

080022c8 <xTaskCreate>:
	{
 80022c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022cc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80022d0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d2:	4650      	mov	r0, sl
	{
 80022d4:	460f      	mov	r7, r1
 80022d6:	4699      	mov	r9, r3
 80022d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022da:	f7ff fed7 	bl	800208c <pvPortMalloc>
			if( pxStack != NULL )
 80022de:	4605      	mov	r5, r0
 80022e0:	2800      	cmp	r0, #0
 80022e2:	f000 8096 	beq.w	8002412 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022e6:	2054      	movs	r0, #84	; 0x54
 80022e8:	f7ff fed0 	bl	800208c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80022ec:	4604      	mov	r4, r0
 80022ee:	2800      	cmp	r0, #0
 80022f0:	f000 808c 	beq.w	800240c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80022f4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80022f8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80022fa:	4455      	add	r5, sl
 80022fc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80022fe:	f025 0a07 	bic.w	sl, r5, #7
 8002302:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002306:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002308:	7859      	ldrb	r1, [r3, #1]
 800230a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800230e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002312:	b109      	cbz	r1, 8002318 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002314:	42bb      	cmp	r3, r7
 8002316:	d1f7      	bne.n	8002308 <xTaskCreate+0x40>
 8002318:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800231a:	2d06      	cmp	r5, #6
 800231c:	bf28      	it	cs
 800231e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002320:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002324:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002326:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002328:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800232a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800232c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002330:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002334:	f7ff fce9 	bl	8001d0a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002338:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800233c:	f104 0018 	add.w	r0, r4, #24
 8002340:	f7ff fce3 	bl	8001d0a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002344:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002348:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800234a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800234c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800234e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002352:	464a      	mov	r2, r9
 8002354:	4641      	mov	r1, r8
 8002356:	4650      	mov	r0, sl
 8002358:	f7ff fd40 	bl	8001ddc <pxPortInitialiseStack>
 800235c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800235e:	b106      	cbz	r6, 8002362 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002360:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002362:	f7ff fd67 	bl	8001e34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002366:	4b32      	ldr	r3, [pc, #200]	; (8002430 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002368:	4e32      	ldr	r6, [pc, #200]	; (8002434 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002460 <xTaskCreate+0x198>
 8002370:	3201      	adds	r2, #1
 8002372:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002374:	6835      	ldr	r5, [r6, #0]
 8002376:	2d00      	cmp	r5, #0
 8002378:	d14e      	bne.n	8002418 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800237a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11d      	bne.n	80023be <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002382:	eb08 0005 	add.w	r0, r8, r5
 8002386:	3514      	adds	r5, #20
 8002388:	f7ff fcb4 	bl	8001cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800238c:	2d8c      	cmp	r5, #140	; 0x8c
 800238e:	d1f8      	bne.n	8002382 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002390:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002464 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002394:	4d28      	ldr	r5, [pc, #160]	; (8002438 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002396:	4648      	mov	r0, r9
 8002398:	f7ff fcac 	bl	8001cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff fca9 	bl	8001cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023a2:	4826      	ldr	r0, [pc, #152]	; (800243c <xTaskCreate+0x174>)
 80023a4:	f7ff fca6 	bl	8001cf4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80023a8:	4825      	ldr	r0, [pc, #148]	; (8002440 <xTaskCreate+0x178>)
 80023aa:	f7ff fca3 	bl	8001cf4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80023ae:	4825      	ldr	r0, [pc, #148]	; (8002444 <xTaskCreate+0x17c>)
 80023b0:	f7ff fca0 	bl	8001cf4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <xTaskCreate+0x180>)
 80023b6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <xTaskCreate+0x184>)
 80023bc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80023be:	4a24      	ldr	r2, [pc, #144]	; (8002450 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80023c0:	4924      	ldr	r1, [pc, #144]	; (8002454 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80023c2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023c4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80023c6:	3301      	adds	r3, #1
 80023c8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023cc:	2501      	movs	r5, #1
 80023ce:	fa05 f302 	lsl.w	r3, r5, r2
 80023d2:	4303      	orrs	r3, r0
 80023d4:	2014      	movs	r0, #20
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	fb00 8002 	mla	r0, r0, r2, r8
 80023dc:	4639      	mov	r1, r7
 80023de:	f7ff fc97 	bl	8001d10 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80023e2:	f7ff fd49 	bl	8001e78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <xTaskCreate+0x190>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b163      	cbz	r3, 8002406 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ec:	6833      	ldr	r3, [r6, #0]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d207      	bcs.n	8002406 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <xTaskCreate+0x194>)
 80023f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	f3bf 8f6f 	isb	sy
	}
 8002406:	4628      	mov	r0, r5
 8002408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800240c:	4628      	mov	r0, r5
 800240e:	f7ff fecb 	bl	80021a8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002412:	f04f 35ff 	mov.w	r5, #4294967295
 8002416:	e7f6      	b.n	8002406 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <xTaskCreate+0x190>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ce      	bne.n	80023be <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002420:	6833      	ldr	r3, [r6, #0]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002426:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002428:	bf98      	it	ls
 800242a:	6034      	strls	r4, [r6, #0]
 800242c:	e7c7      	b.n	80023be <xTaskCreate+0xf6>
 800242e:	bf00      	nop
 8002430:	20003d44 	.word	0x20003d44
 8002434:	20003cac 	.word	0x20003cac
 8002438:	20003d70 	.word	0x20003d70
 800243c:	20003d90 	.word	0x20003d90
 8002440:	20003dbc 	.word	0x20003dbc
 8002444:	20003da8 	.word	0x20003da8
 8002448:	20003cb0 	.word	0x20003cb0
 800244c:	20003cb4 	.word	0x20003cb4
 8002450:	20003d54 	.word	0x20003d54
 8002454:	20003d58 	.word	0x20003d58
 8002458:	20003da4 	.word	0x20003da4
 800245c:	e000ed04 	.word	0xe000ed04
 8002460:	20003cb8 	.word	0x20003cb8
 8002464:	20003d5c 	.word	0x20003d5c

08002468 <vTaskStartScheduler>:
{
 8002468:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <vTaskStartScheduler+0x60>)
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2400      	movs	r4, #0
 8002470:	9400      	str	r4, [sp, #0]
 8002472:	4623      	mov	r3, r4
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <vTaskStartScheduler+0x64>)
 8002478:	4815      	ldr	r0, [pc, #84]	; (80024d0 <vTaskStartScheduler+0x68>)
 800247a:	f7ff ff25 	bl	80022c8 <xTaskCreate>
	if( xReturn == pdPASS )
 800247e:	2801      	cmp	r0, #1
 8002480:	d114      	bne.n	80024ac <vTaskStartScheduler+0x44>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <vTaskStartScheduler+0x6c>)
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <vTaskStartScheduler+0x70>)
 800249c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <vTaskStartScheduler+0x74>)
 80024a0:	601c      	str	r4, [r3, #0]
}
 80024a2:	b002      	add	sp, #8
 80024a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80024a8:	f7ff bd56 	b.w	8001f58 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ac:	3001      	adds	r0, #1
 80024ae:	d108      	bne.n	80024c2 <vTaskStartScheduler+0x5a>
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	e7fe      	b.n	80024c0 <vTaskStartScheduler+0x58>
}
 80024c2:	b002      	add	sp, #8
 80024c4:	bd10      	pop	{r4, pc}
 80024c6:	bf00      	nop
 80024c8:	20003d84 	.word	0x20003d84
 80024cc:	08004338 	.word	0x08004338
 80024d0:	0800274d 	.word	0x0800274d
 80024d4:	20003d88 	.word	0x20003d88
 80024d8:	20003da4 	.word	0x20003da4
 80024dc:	20003dd0 	.word	0x20003dd0

080024e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80024e0:	4a02      	ldr	r2, [pc, #8]	; (80024ec <vTaskSuspendAll+0xc>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20003d50 	.word	0x20003d50

080024f0 <xTaskIncrementTick>:
{
 80024f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <xTaskIncrementTick+0xf8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d153      	bne.n	80025a4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <xTaskIncrementTick+0xfc>)
 80024fe:	681c      	ldr	r4, [r3, #0]
 8002500:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002502:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002504:	b9bc      	cbnz	r4, 8002536 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <xTaskIncrementTick+0x100>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	b142      	cbz	r2, 8002520 <xTaskIncrementTick+0x30>
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	e7fe      	b.n	800251e <xTaskIncrementTick+0x2e>
 8002520:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <xTaskIncrementTick+0x104>)
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	6810      	ldr	r0, [r2, #0]
 8002526:	6018      	str	r0, [r3, #0]
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <xTaskIncrementTick+0x108>)
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	f7ff fe71 	bl	8002218 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002536:	4d31      	ldr	r5, [pc, #196]	; (80025fc <xTaskIncrementTick+0x10c>)
 8002538:	4f31      	ldr	r7, [pc, #196]	; (8002600 <xTaskIncrementTick+0x110>)
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	429c      	cmp	r4, r3
 800253e:	f04f 0b00 	mov.w	fp, #0
 8002542:	d33e      	bcc.n	80025c2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002544:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80025f0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002548:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002610 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800254c:	f8d8 2000 	ldr.w	r2, [r8]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	bb72      	cbnz	r2, 80025b2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	602a      	str	r2, [r5, #0]
					break;
 800255a:	e032      	b.n	80025c2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800255c:	f106 0a04 	add.w	sl, r6, #4
 8002560:	4650      	mov	r0, sl
 8002562:	f7ff fbf8 	bl	8001d56 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002566:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002568:	b119      	cbz	r1, 8002572 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256a:	f106 0018 	add.w	r0, r6, #24
 800256e:	f7ff fbf2 	bl	8001d56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002572:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002574:	f8d9 3000 	ldr.w	r3, [r9]
 8002578:	2201      	movs	r2, #1
 800257a:	fa02 f100 	lsl.w	r1, r2, r0
 800257e:	4319      	orrs	r1, r3
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <xTaskIncrementTick+0x114>)
 8002582:	f8c9 1000 	str.w	r1, [r9]
 8002586:	f04f 0e14 	mov.w	lr, #20
 800258a:	4651      	mov	r1, sl
 800258c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002590:	f7ff fbbe 	bl	8001d10 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002598:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800259a:	4291      	cmp	r1, r2
 800259c:	bf28      	it	cs
 800259e:	f04f 0b01 	movcs.w	fp, #1
 80025a2:	e7d3      	b.n	800254c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <xTaskIncrementTick+0x118>)
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80025ac:	f04f 0b00 	mov.w	fp, #0
 80025b0:	e011      	b.n	80025d6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025b2:	f8d8 2000 	ldr.w	r2, [r8]
 80025b6:	68d2      	ldr	r2, [r2, #12]
 80025b8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025ba:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80025bc:	428c      	cmp	r4, r1
 80025be:	d2cd      	bcs.n	800255c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80025c0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <xTaskIncrementTick+0x114>)
 80025c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025c8:	2214      	movs	r2, #20
 80025ca:	434a      	muls	r2, r1
 80025cc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80025ce:	2a02      	cmp	r2, #2
 80025d0:	bf28      	it	cs
 80025d2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80025d6:	4a0d      	ldr	r2, [pc, #52]	; (800260c <xTaskIncrementTick+0x11c>)
 80025d8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80025da:	2a00      	cmp	r2, #0
 80025dc:	bf18      	it	ne
 80025de:	f04f 0b01 	movne.w	fp, #1
}
 80025e2:	4658      	mov	r0, fp
 80025e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e8:	20003d50 	.word	0x20003d50
 80025ec:	20003dd0 	.word	0x20003dd0
 80025f0:	20003cb0 	.word	0x20003cb0
 80025f4:	20003cb4 	.word	0x20003cb4
 80025f8:	20003d8c 	.word	0x20003d8c
 80025fc:	20003d88 	.word	0x20003d88
 8002600:	20003cac 	.word	0x20003cac
 8002604:	20003cb8 	.word	0x20003cb8
 8002608:	20003d4c 	.word	0x20003d4c
 800260c:	20003dd4 	.word	0x20003dd4
 8002610:	20003d58 	.word	0x20003d58

08002614 <xTaskResumeAll>:
{
 8002614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002618:	4c31      	ldr	r4, [pc, #196]	; (80026e0 <xTaskResumeAll+0xcc>)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	b943      	cbnz	r3, 8002630 <xTaskResumeAll+0x1c>
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	e7fe      	b.n	800262e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002630:	f7ff fc00 	bl	8001e34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	3b01      	subs	r3, #1
 8002638:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263a:	6824      	ldr	r4, [r4, #0]
 800263c:	b12c      	cbz	r4, 800264a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800263e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002640:	f7ff fc1a 	bl	8001e78 <vPortExitCritical>
}
 8002644:	4620      	mov	r0, r4
 8002646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <xTaskResumeAll+0xd0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f5      	beq.n	800263e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002652:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80026fc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002656:	4f24      	ldr	r7, [pc, #144]	; (80026e8 <xTaskResumeAll+0xd4>)
 8002658:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002700 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800265c:	f8d9 3000 	ldr.w	r3, [r9]
 8002660:	b9e3      	cbnz	r3, 800269c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002662:	b10c      	cbz	r4, 8002668 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002664:	f7ff fdd8 	bl	8002218 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002668:	4d20      	ldr	r5, [pc, #128]	; (80026ec <xTaskResumeAll+0xd8>)
 800266a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800266c:	b144      	cbz	r4, 8002680 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800266e:	4e20      	ldr	r6, [pc, #128]	; (80026f0 <xTaskResumeAll+0xdc>)
 8002670:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002672:	f7ff ff3d 	bl	80024f0 <xTaskIncrementTick>
 8002676:	b100      	cbz	r0, 800267a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002678:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800267a:	3c01      	subs	r4, #1
 800267c:	d1f9      	bne.n	8002672 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800267e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <xTaskResumeAll+0xdc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0da      	beq.n	800263e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <xTaskResumeAll+0xe0>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002698:	2401      	movs	r4, #1
 800269a:	e7d1      	b.n	8002640 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800269c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80026a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a4:	f104 0018 	add.w	r0, r4, #24
 80026a8:	f7ff fb55 	bl	8001d56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ac:	4630      	mov	r0, r6
 80026ae:	f7ff fb52 	bl	8001d56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	2501      	movs	r5, #1
 80026b8:	fa05 f302 	lsl.w	r3, r5, r2
 80026bc:	2014      	movs	r0, #20
 80026be:	430b      	orrs	r3, r1
 80026c0:	fb00 8002 	mla	r0, r0, r2, r8
 80026c4:	4631      	mov	r1, r6
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	f7ff fb22 	bl	8001d10 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <xTaskResumeAll+0xe4>)
 80026ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80026d6:	bf24      	itt	cs
 80026d8:	4b05      	ldrcs	r3, [pc, #20]	; (80026f0 <xTaskResumeAll+0xdc>)
 80026da:	601d      	strcs	r5, [r3, #0]
 80026dc:	e7be      	b.n	800265c <xTaskResumeAll+0x48>
 80026de:	bf00      	nop
 80026e0:	20003d50 	.word	0x20003d50
 80026e4:	20003d44 	.word	0x20003d44
 80026e8:	20003d58 	.word	0x20003d58
 80026ec:	20003d4c 	.word	0x20003d4c
 80026f0:	20003dd4 	.word	0x20003dd4
 80026f4:	e000ed04 	.word	0xe000ed04
 80026f8:	20003cac 	.word	0x20003cac
 80026fc:	20003d90 	.word	0x20003d90
 8002700:	20003cb8 	.word	0x20003cb8

08002704 <vTaskDelay>:
	{
 8002704:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002706:	b940      	cbnz	r0, 800271a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <vTaskDelay+0x40>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <vTaskDelay+0x44>)
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	b141      	cbz	r1, 8002732 <vTaskDelay+0x2e>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	e7fe      	b.n	8002730 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002732:	f7ff fed5 	bl	80024e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002736:	f7ff fd81 	bl	800223c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800273a:	f7ff ff6b 	bl	8002614 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800273e:	2800      	cmp	r0, #0
 8002740:	d0e2      	beq.n	8002708 <vTaskDelay+0x4>
 8002742:	bd08      	pop	{r3, pc}
 8002744:	e000ed04 	.word	0xe000ed04
 8002748:	20003d50 	.word	0x20003d50

0800274c <prvIdleTask>:
{
 800274c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800274e:	4e17      	ldr	r6, [pc, #92]	; (80027ac <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002750:	4c17      	ldr	r4, [pc, #92]	; (80027b0 <prvIdleTask+0x64>)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	b963      	cbnz	r3, 8002770 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <prvIdleTask+0x68>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d9f8      	bls.n	8002750 <prvIdleTask+0x4>
				taskYIELD();
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <prvIdleTask+0x6c>)
 8002760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	e7ef      	b.n	8002750 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002770:	f7ff feb6 	bl	80024e0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002774:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002776:	f7ff ff4d 	bl	8002614 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800277a:	2d00      	cmp	r5, #0
 800277c:	d0e9      	beq.n	8002752 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800277e:	f7ff fb59 	bl	8001e34 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002782:	68f3      	ldr	r3, [r6, #12]
 8002784:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002786:	1d28      	adds	r0, r5, #4
 8002788:	f7ff fae5 	bl	8001d56 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <prvIdleTask+0x70>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	3b01      	subs	r3, #1
 8002798:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800279a:	f7ff fb6d 	bl	8001e78 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800279e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027a0:	f7ff fd02 	bl	80021a8 <vPortFree>
			vPortFree( pxTCB );
 80027a4:	4628      	mov	r0, r5
 80027a6:	f7ff fcff 	bl	80021a8 <vPortFree>
 80027aa:	e7d2      	b.n	8002752 <prvIdleTask+0x6>
 80027ac:	20003dbc 	.word	0x20003dbc
 80027b0:	20003d48 	.word	0x20003d48
 80027b4:	20003cb8 	.word	0x20003cb8
 80027b8:	e000ed04 	.word	0xe000ed04
 80027bc:	20003d44 	.word	0x20003d44

080027c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <vTaskSwitchContext+0x60>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <vTaskSwitchContext+0x64>)
{
 80027c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027c8:	b112      	cbz	r2, 80027d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80027ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80027d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <vTaskSwitchContext+0x68>)
 80027d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f1c3 031f 	rsb	r3, r3, #31
 80027e0:	2214      	movs	r2, #20
 80027e2:	4912      	ldr	r1, [pc, #72]	; (800282c <vTaskSwitchContext+0x6c>)
 80027e4:	435a      	muls	r2, r3
 80027e6:	1888      	adds	r0, r1, r2
 80027e8:	588c      	ldr	r4, [r1, r2]
 80027ea:	b944      	cbnz	r4, 80027fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	e7fe      	b.n	80027fc <vTaskSwitchContext+0x3c>
 80027fe:	6844      	ldr	r4, [r0, #4]
 8002800:	3208      	adds	r2, #8
 8002802:	6864      	ldr	r4, [r4, #4]
 8002804:	6044      	str	r4, [r0, #4]
 8002806:	440a      	add	r2, r1
 8002808:	4294      	cmp	r4, r2
 800280a:	bf04      	itt	eq
 800280c:	6862      	ldreq	r2, [r4, #4]
 800280e:	6042      	streq	r2, [r0, #4]
 8002810:	2214      	movs	r2, #20
 8002812:	fb02 1303 	mla	r3, r2, r3, r1
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <vTaskSwitchContext+0x70>)
 800281c:	e7d6      	b.n	80027cc <vTaskSwitchContext+0xc>
 800281e:	bf00      	nop
 8002820:	20003d50 	.word	0x20003d50
 8002824:	20003dd4 	.word	0x20003dd4
 8002828:	20003d58 	.word	0x20003d58
 800282c:	20003cb8 	.word	0x20003cb8
 8002830:	20003cac 	.word	0x20003cac

08002834 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <xTaskGetSchedulerState+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b133      	cbz	r3, 8002848 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <xTaskGetSchedulerState+0x1c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002840:	bf0c      	ite	eq
 8002842:	2002      	moveq	r0, #2
 8002844:	2000      	movne	r0, #0
 8002846:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002848:	2001      	movs	r0, #1
	}
 800284a:	4770      	bx	lr
 800284c:	20003da4 	.word	0x20003da4
 8002850:	20003d50 	.word	0x20003d50
 8002854:	00000000 	.word	0x00000000

08002858 <float_to_string>:
/* Function to convert a float to a string based on code available in https://gist.github.com/psych0der/6319244 */
#define precision 3  //precision for decimal digits


const char * float_to_string(float f, char *str)
{
 8002858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ff = f;
	//char str[30];
	int a,b,c,k,l=0,m,i=0,j;

	// check for negative float
	if(f<0.0)
 800285c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{

		str[i++]='-';
		f*=-1;
 8002864:	bf48      	it	mi
 8002866:	eeb1 0a40 	vnegmi.f32	s0, s0
	}

	a=f;	// extracting whole number
 800286a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
{
 800286e:	ed2d 8b04 	vpush	{d8-d9}
	f-=a;	// extracting decimal part
 8002872:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	k = precision;

	// number of digits in whole number
	while(k>-1)
	{
		l = pow(10,k);
 8002876:	ed9f 9b34 	vldr	d9, [pc, #208]	; 8002948 <float_to_string+0xf0>
		str[i++]='-';
 800287a:	bf48      	it	mi
 800287c:	232d      	movmi	r3, #45	; 0x2d
	a=f;	// extracting whole number
 800287e:	ee17 7a90 	vmov	r7, s15
	f-=a;	// extracting decimal part
 8002882:	ee30 8a48 	vsub.f32	s16, s0, s16
{
 8002886:	4606      	mov	r6, r0
		str[i++]='-';
 8002888:	bf46      	itte	mi
 800288a:	7003      	strbmi	r3, [r0, #0]
 800288c:	2401      	movmi	r4, #1
	int a,b,c,k,l=0,m,i=0,j;
 800288e:	2400      	movpl	r4, #0
	k = precision;
 8002890:	2503      	movs	r5, #3
		l = pow(10,k);
 8002892:	4628      	mov	r0, r5
 8002894:	f7fd fdfe 	bl	8000494 <__aeabi_i2d>
 8002898:	eeb0 0a49 	vmov.f32	s0, s18
 800289c:	eef0 0a69 	vmov.f32	s1, s19
 80028a0:	ec41 0b11 	vmov	d1, r0, r1
 80028a4:	f000 fcba 	bl	800321c <pow>
 80028a8:	ec51 0b10 	vmov	r0, r1, d0
 80028ac:	f7fe f908 	bl	8000ac0 <__aeabi_d2iz>
		m = a/l;
 80028b0:	fb97 f0f0 	sdiv	r0, r7, r0
		if(m>0)
 80028b4:	2800      	cmp	r0, #0
 80028b6:	dc02      	bgt.n	80028be <float_to_string+0x66>
	while(k>-1)
 80028b8:	f115 35ff 	adds.w	r5, r5, #4294967295
 80028bc:	d2e9      	bcs.n	8002892 <float_to_string+0x3a>
	obtained as quotient by dividing number by 10^k where k = (number of digit -1)
	*/

	for(l=k+1;l>0;l--)
	{
		b = pow(10,l-1);
 80028be:	ed9f 9b22 	vldr	d9, [pc, #136]	; 8002948 <float_to_string+0xf0>
	for(l=k+1;l>0;l--)
 80028c2:	3501      	adds	r5, #1
 80028c4:	eb06 0904 	add.w	r9, r6, r4
 80028c8:	46a8      	mov	r8, r5
 80028ca:	f1b8 0f00 	cmp.w	r8, #0
 80028ce:	d11e      	bne.n	800290e <float_to_string+0xb6>
 80028d0:	442c      	add	r4, r5
		c = a/b;
		str[i++]=c+48;
		a%=b;
	}
	str[i++] = '.';
 80028d2:	232e      	movs	r3, #46	; 0x2e
 80028d4:	1932      	adds	r2, r6, r4
 80028d6:	5533      	strb	r3, [r6, r4]
 80028d8:	3403      	adds	r4, #3
 80028da:	4613      	mov	r3, r2
 80028dc:	4434      	add	r4, r6

	/* extracting decimal digits till precision */

	for(l=0;l<precision;l++)
	{
		f*=10.0;
 80028de:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80028e2:	ee28 0a27 	vmul.f32	s0, s16, s15
		b = f;
 80028e6:	eebd 8ac0 	vcvt.s32.f32	s16, s0
		str[i++]=b+48;
 80028ea:	ee18 1a10 	vmov	r1, s16
 80028ee:	3130      	adds	r1, #48	; 0x30
 80028f0:	f803 1f01 	strb.w	r1, [r3, #1]!
		f-=b;
 80028f4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	for(l=0;l<precision;l++)
 80028f8:	429c      	cmp	r4, r3
		f-=b;
 80028fa:	ee30 8a48 	vsub.f32	s16, s0, s16
	for(l=0;l<precision;l++)
 80028fe:	d1f0      	bne.n	80028e2 <float_to_string+0x8a>
	}

	str[i]='\0';
 8002900:	2300      	movs	r3, #0
 8002902:	7113      	strb	r3, [r2, #4]
	//printf("\n orignal printf %f\n",ff);
	//printf("\n float string %s\n",str);


	return str;
}
 8002904:	ecbd 8b04 	vpop	{d8-d9}
 8002908:	4630      	mov	r0, r6
 800290a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		b = pow(10,l-1);
 800290e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002912:	4640      	mov	r0, r8
 8002914:	f7fd fdbe 	bl	8000494 <__aeabi_i2d>
 8002918:	eeb0 0a49 	vmov.f32	s0, s18
 800291c:	eef0 0a69 	vmov.f32	s1, s19
 8002920:	ec41 0b11 	vmov	d1, r0, r1
 8002924:	f000 fc7a 	bl	800321c <pow>
 8002928:	ec51 0b10 	vmov	r0, r1, d0
 800292c:	f7fe f8c8 	bl	8000ac0 <__aeabi_d2iz>
		c = a/b;
 8002930:	fb97 f3f0 	sdiv	r3, r7, r0
		str[i++]=c+48;
 8002934:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002938:	f809 2b01 	strb.w	r2, [r9], #1
		a%=b;
 800293c:	fb00 7713 	mls	r7, r0, r3, r7
 8002940:	e7c3      	b.n	80028ca <float_to_string+0x72>
 8002942:	bf00      	nop
 8002944:	f3af 8000 	nop.w
 8002948:	00000000 	.word	0x00000000
 800294c:	40240000 	.word	0x40240000

08002950 <StartDefaultTask>:
}


/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002954:	ed2d 8b02 	vpush	{d8}
 8002958:	b088      	sub	sp, #32
    float  adc_value_voltage = 0;
    char adc_value_voltage_char[10];
    float vec_data[4000];
    char vec_data_converted_char[10];
    float ang = 0;
    uint8_t vetor = 0;
 800295a:	2300      	movs	r3, #0
    uint8_t n = 1;
    uint32_t nmax = 100;
    uint16_t adc_value = 0;
    uint32_t timeout = 1000;

    HAL_ADC_MspInit(&hadc1);   //clock and pins config
 800295c:	4854      	ldr	r0, [pc, #336]	; (8002ab0 <StartDefaultTask+0x160>)
    uint8_t vetor = 0;
 800295e:	f88d 3007 	strb.w	r3, [sp, #7]
    	HAL_ADC_Start(&hadc1);
    	while(HAL_ADC_PollForConversion(&hadc1, timeout ) != HAL_OK);
    	adc_value = HAL_ADC_GetValue(&hadc1);
    	HAL_ADC_Stop(&hadc1);

    	adc_value_voltage = ((adc_value*3.3)/256); //register -> voltage
 8002962:	a751      	add	r7, pc, #324	; (adr r7, 8002aa8 <StartDefaultTask+0x158>)
 8002964:	e9d7 6700 	ldrd	r6, r7, [r7]
    HAL_ADC_MspInit(&hadc1);   //clock and pins config
 8002968:	f000 fb76 	bl	8003058 <HAL_ADC_MspInit>
    HAL_UART_Receive(&huart2, &vetor, 1, 10);
 800296c:	4c51      	ldr	r4, [pc, #324]	; (8002ab4 <StartDefaultTask+0x164>)
    	adc_value_voltage = ((adc_value*3.3)/256); //register -> voltage
 800296e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8002ad0 <StartDefaultTask+0x180>
 8002972:	f04f 0800 	mov.w	r8, #0
    osDelay(5);
 8002976:	2005      	movs	r0, #5
 8002978:	f7ff f9aa 	bl	8001cd0 <osDelay>
    HAL_UART_Receive(&huart2, &vetor, 1, 10);
 800297c:	230a      	movs	r3, #10
 800297e:	2201      	movs	r2, #1
 8002980:	f10d 0107 	add.w	r1, sp, #7
 8002984:	484b      	ldr	r0, [pc, #300]	; (8002ab4 <StartDefaultTask+0x164>)
 8002986:	f7ff f926 	bl	8001bd6 <HAL_UART_Receive>
    osDelay(5);
 800298a:	2005      	movs	r0, #5
 800298c:	f7ff f9a0 	bl	8001cd0 <osDelay>
    switch(vetor)
 8002990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002994:	2b32      	cmp	r3, #50	; 0x32
 8002996:	d00e      	beq.n	80029b6 <StartDefaultTask+0x66>
 8002998:	2b34      	cmp	r3, #52	; 0x34
 800299a:	d011      	beq.n	80029c0 <StartDefaultTask+0x70>
 800299c:	2b31      	cmp	r3, #49	; 0x31
 800299e:	d1ea      	bne.n	8002976 <StartDefaultTask+0x26>
    	HAL_UART_Transmit(&huart2, msg1, strlen(msg1), 0xFFFF);
 80029a0:	4945      	ldr	r1, [pc, #276]	; (8002ab8 <StartDefaultTask+0x168>)
 80029a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a6:	222c      	movs	r2, #44	; 0x2c
    	HAL_UART_Transmit(&huart2, msg2, strlen(msg2), 0xFFFF);
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff f8b7 	bl	8001b1c <HAL_UART_Transmit>
    	vetor = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f88d 3007 	strb.w	r3, [sp, #7]
    	break;
 80029b4:	e7df      	b.n	8002976 <StartDefaultTask+0x26>
    	HAL_UART_Transmit(&huart2, msg2, strlen(msg2), 0xFFFF);
 80029b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ba:	2212      	movs	r2, #18
 80029bc:	493f      	ldr	r1, [pc, #252]	; (8002abc <StartDefaultTask+0x16c>)
 80029be:	e7f3      	b.n	80029a8 <StartDefaultTask+0x58>
    	HAL_ADC_Start(&hadc1);
 80029c0:	483b      	ldr	r0, [pc, #236]	; (8002ab0 <StartDefaultTask+0x160>)
 80029c2:	f7fe f9db 	bl	8000d7c <HAL_ADC_Start>
    	while(HAL_ADC_PollForConversion(&hadc1, timeout ) != HAL_OK);
 80029c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ca:	4839      	ldr	r0, [pc, #228]	; (8002ab0 <StartDefaultTask+0x160>)
 80029cc:	f7fe fa54 	bl	8000e78 <HAL_ADC_PollForConversion>
 80029d0:	4605      	mov	r5, r0
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d1f7      	bne.n	80029c6 <StartDefaultTask+0x76>
    	adc_value = HAL_ADC_GetValue(&hadc1);
 80029d6:	4836      	ldr	r0, [pc, #216]	; (8002ab0 <StartDefaultTask+0x160>)
 80029d8:	f7fe fa9e 	bl	8000f18 <HAL_ADC_GetValue>
 80029dc:	4682      	mov	sl, r0
    	HAL_ADC_Stop(&hadc1);
 80029de:	4834      	ldr	r0, [pc, #208]	; (8002ab0 <StartDefaultTask+0x160>)
 80029e0:	f7fe fa2c 	bl	8000e3c <HAL_ADC_Stop>
    	adc_value_voltage = ((adc_value*3.3)/256); //register -> voltage
 80029e4:	fa1f f08a 	uxth.w	r0, sl
 80029e8:	f7fd fd54 	bl	8000494 <__aeabi_i2d>
 80029ec:	4632      	mov	r2, r6
 80029ee:	463b      	mov	r3, r7
 80029f0:	f7fd fdb6 	bl	8000560 <__aeabi_dmul>
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	f7fd fdb2 	bl	8000560 <__aeabi_dmul>
 80029fc:	f7fe f888 	bl	8000b10 <__aeabi_d2f>
 8002a00:	ee08 0a10 	vmov	s16, r0
    	ang = (adc_value_voltage*180)/3.3;   		// voltage -> angle
    	vec_data[n] = ang;							//write on buffer

    	float_to_string(adc_value_voltage, adc_value_voltage_char);
 8002a04:	a802      	add	r0, sp, #8
 8002a06:	eeb0 0a48 	vmov.f32	s0, s16
 8002a0a:	f7ff ff25 	bl	8002858 <float_to_string>
    	ang = (adc_value_voltage*180)/3.3;   		// voltage -> angle
 8002a0e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8002ac0 <StartDefaultTask+0x170>
 8002a12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a16:	ee17 0a90 	vmov	r0, s15
 8002a1a:	f7fd fd4d 	bl	80004b8 <__aeabi_f2d>
 8002a1e:	4632      	mov	r2, r6
 8002a20:	463b      	mov	r3, r7
 8002a22:	f7fd fec7 	bl	80007b4 <__aeabi_ddiv>
 8002a26:	f7fe f873 	bl	8000b10 <__aeabi_d2f>
 8002a2a:	ee00 0a10 	vmov	s0, r0
    	float_to_string(vec_data[n], vec_data_converted_char);
 8002a2e:	a805      	add	r0, sp, #20
 8002a30:	f7ff ff12 	bl	8002858 <float_to_string>

    	HAL_UART_Transmit(&huart2, "Tensao: ", strlen("Tensao: "), timeout);
 8002a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a38:	2208      	movs	r2, #8
 8002a3a:	4922      	ldr	r1, [pc, #136]	; (8002ac4 <StartDefaultTask+0x174>)
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff f86d 	bl	8001b1c <HAL_UART_Transmit>
    	osDelay(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff f944 	bl	8001cd0 <osDelay>
    	HAL_UART_Transmit(&huart2, adc_value_voltage_char, strlen(adc_value_voltage_char), timeout);
 8002a48:	a802      	add	r0, sp, #8
 8002a4a:	f7fd fbc9 	bl	80001e0 <strlen>
 8002a4e:	a902      	add	r1, sp, #8
 8002a50:	b282      	uxth	r2, r0
 8002a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff f860 	bl	8001b1c <HAL_UART_Transmit>
    	adc_value = 0;
    	vetor = 0;
    	osDelay(1);
 8002a5c:	2001      	movs	r0, #1
    	vetor = 0;
 8002a5e:	f88d 5007 	strb.w	r5, [sp, #7]
    	osDelay(1);
 8002a62:	f7ff f935 	bl	8001cd0 <osDelay>
    	HAL_UART_Transmit(&huart2, "\n\rAngulo correspondente: ", strlen("\n\rAngulo correspondente: "), timeout);
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	2219      	movs	r2, #25
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <StartDefaultTask+0x178>)
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff f854 	bl	8001b1c <HAL_UART_Transmit>
    	osDelay(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7ff f92b 	bl	8001cd0 <osDelay>
     	HAL_UART_Transmit(&huart2, vec_data_converted_char, strlen(vec_data_converted_char), timeout);
 8002a7a:	a805      	add	r0, sp, #20
 8002a7c:	f7fd fbb0 	bl	80001e0 <strlen>
 8002a80:	a905      	add	r1, sp, #20
 8002a82:	b282      	uxth	r2, r0
 8002a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff f847 	bl	8001b1c <HAL_UART_Transmit>
    	osDelay(1);
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7ff f91e 	bl	8001cd0 <osDelay>
    	HAL_UART_Transmit(&huart2, "\n\r", strlen("\n\r"), timeout);
 8002a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a98:	2202      	movs	r2, #2
 8002a9a:	490c      	ldr	r1, [pc, #48]	; (8002acc <StartDefaultTask+0x17c>)
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7ff f83d 	bl	8001b1c <HAL_UART_Transmit>
 8002aa2:	e768      	b.n	8002976 <StartDefaultTask+0x26>
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	66666666 	.word	0x66666666
 8002aac:	400a6666 	.word	0x400a6666
 8002ab0:	20003de0 	.word	0x20003de0
 8002ab4:	20003e80 	.word	0x20003e80
 8002ab8:	0800433d 	.word	0x0800433d
 8002abc:	0800436a 	.word	0x0800436a
 8002ac0:	43340000 	.word	0x43340000
 8002ac4:	0800437d 	.word	0x0800437d
 8002ac8:	08004386 	.word	0x08004386
 8002acc:	08004367 	.word	0x08004367
 8002ad0:	3f700000 	.word	0x3f700000
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <StartTask02>:
}


/* StartTask02 function */
void StartTask02(void const * argument)
{
 8002ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002adc:	ed2d 8b02 	vpush	{d8}
    float A1=2.3, A2=1.1, A0=1.4, sum=1;
	float tol = 0;
    float r1 = 0, r2 = 0,r2n = 0;
    char r1_char[10],r2_char[10], r2n_char[10];

	 HAL_ADC_MspInit(&hadc1);   //clock and pins config
 8002ae0:	4893      	ldr	r0, [pc, #588]	; (8002d30 <StartTask02+0x258>)

	 /*read eletrogoniometer nmax samples*/
	for(int h=0; h<nmax; h++)
	{
		HAL_ADC_Start(&hadc1);
 8002ae2:	4e93      	ldr	r6, [pc, #588]	; (8002d30 <StartTask02+0x258>)
{
 8002ae4:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
	 HAL_ADC_MspInit(&hadc1);   //clock and pins config
 8002ae8:	f000 fab6 	bl	8003058 <HAL_ADC_MspInit>
		adc_value_esp = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Stop(&hadc1);

	    osDelay(5);

	    adc_value_voltage_esp = ((adc_value_esp*3.3)/256);
 8002aec:	f20f 2928 	addw	r9, pc, #552	; 0x228
 8002af0:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002af4:	ac0c      	add	r4, sp, #48	; 0x30
 8002af6:	f50d 67ce 	add.w	r7, sp, #1648	; 0x670
	 HAL_ADC_MspInit(&hadc1);   //clock and pins config
 8002afa:	4625      	mov	r5, r4
		HAL_ADC_Start(&hadc1);
 8002afc:	4630      	mov	r0, r6
 8002afe:	f7fe f93d 	bl	8000d7c <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, timeout ) != HAL_OK);
 8002b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b06:	488a      	ldr	r0, [pc, #552]	; (8002d30 <StartTask02+0x258>)
 8002b08:	f7fe f9b6 	bl	8000e78 <HAL_ADC_PollForConversion>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1f8      	bne.n	8002b02 <StartTask02+0x2a>
		adc_value_esp = HAL_ADC_GetValue(&hadc1);
 8002b10:	4630      	mov	r0, r6
 8002b12:	f7fe fa01 	bl	8000f18 <HAL_ADC_GetValue>
 8002b16:	ee08 0a10 	vmov	s16, r0
		HAL_ADC_Stop(&hadc1);
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f7fe f98e 	bl	8000e3c <HAL_ADC_Stop>
	    osDelay(5);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f7ff f8d5 	bl	8001cd0 <osDelay>
	    adc_value_voltage_esp = ((adc_value_esp*3.3)/256);
 8002b26:	eef8 7a48 	vcvt.f32.u32	s15, s16
 8002b2a:	ee17 0a90 	vmov	r0, s15
 8002b2e:	f7fd fcc3 	bl	80004b8 <__aeabi_f2d>
 8002b32:	4642      	mov	r2, r8
 8002b34:	464b      	mov	r3, r9
 8002b36:	f7fd fd13 	bl	8000560 <__aeabi_dmul>
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <StartTask02+0x25c>)
 8002b3e:	f7fd fd0f 	bl	8000560 <__aeabi_dmul>
 8002b42:	f7fd ffe5 	bl	8000b10 <__aeabi_d2f>
    	ang_esp = ((adc_value_voltage_esp*180)/3.3);
 8002b46:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8002d38 <StartTask02+0x260>
 8002b4a:	ee07 0a10 	vmov	s14, r0
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	ee17 0a90 	vmov	r0, s15
 8002b56:	f7fd fcaf 	bl	80004b8 <__aeabi_f2d>
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	f7fd fe29 	bl	80007b4 <__aeabi_ddiv>
 8002b62:	f7fd ffd5 	bl	8000b10 <__aeabi_d2f>
 8002b66:	ee00 0a10 	vmov	s0, r0
    	buf[h] = ang_esp;
 8002b6a:	f845 0b04 	str.w	r0, [r5], #4

    	float_to_string(buf[h], angle_char);
 8002b6e:	4668      	mov	r0, sp
 8002b70:	f7ff fe72 	bl	8002858 <float_to_string>

    	HAL_UART_Transmit(&huart2, angle_char, strlen(angle_char), timeout);    //sendo to pc
 8002b74:	4668      	mov	r0, sp
 8002b76:	f7fd fb33 	bl	80001e0 <strlen>
 8002b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7e:	b282      	uxth	r2, r0
 8002b80:	4669      	mov	r1, sp
 8002b82:	486e      	ldr	r0, [pc, #440]	; (8002d3c <StartTask02+0x264>)
 8002b84:	f7fe ffca 	bl	8001b1c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart2, "\n\r", strlen("\n\r"), timeout);
 8002b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	496c      	ldr	r1, [pc, #432]	; (8002d40 <StartTask02+0x268>)
 8002b90:	486a      	ldr	r0, [pc, #424]	; (8002d3c <StartTask02+0x264>)
 8002b92:	f7fe ffc3 	bl	8001b1c <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, angle_char, strlen(angle_char), timeout);	// send to nodemcu
 8002b96:	4668      	mov	r0, sp
 8002b98:	f7fd fb22 	bl	80001e0 <strlen>
 8002b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba0:	b282      	uxth	r2, r0
 8002ba2:	4669      	mov	r1, sp
 8002ba4:	4867      	ldr	r0, [pc, #412]	; (8002d44 <StartTask02+0x26c>)
 8002ba6:	f7fe ffb9 	bl	8001b1c <HAL_UART_Transmit>
	for(int h=0; h<nmax; h++)
 8002baa:	42bd      	cmp	r5, r7
 8002bac:	d1a6      	bne.n	8002afc <StartTask02+0x24>


     }

/* sampling finished -> start the algorithm*/
	HAL_UART_Transmit(&huart2,"Fim da coleta\n\r", strlen("Fim da coleta\n\r"), timeout);
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	4964      	ldr	r1, [pc, #400]	; (8002d48 <StartTask02+0x270>)
 8002bb6:	4861      	ldr	r0, [pc, #388]	; (8002d3c <StartTask02+0x264>)
    float A1=2.3, A2=1.1, A0=1.4, sum=1;
 8002bb8:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8002d4c <StartTask02+0x274>
	HAL_UART_Transmit(&huart2,"Fim da coleta\n\r", strlen("Fim da coleta\n\r"), timeout);
 8002bbc:	f7fe ffae 	bl	8001b1c <HAL_UART_Transmit>

    /********* recognition of first peak and first valley *************/

	for(int j=1; j<(nmax/2); j++){
		if(  (buf[j]>(buf[j+1]+tol)) && (buf[j]>(buf[j-1]+tol))   )
 8002bc0:	eddf 6a63 	vldr	s13, [pc, #396]	; 8002d50 <StartTask02+0x278>
 8002bc4:	aad3      	add	r2, sp, #844	; 0x34c
	HAL_UART_Transmit(&huart2,"Fim da coleta\n\r", strlen("Fim da coleta\n\r"), timeout);
 8002bc6:	4623      	mov	r3, r4
		if(  (buf[j]>(buf[j+1]+tol)) && (buf[j]>(buf[j-1]+tol))   )
 8002bc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bd0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	dd0a      	ble.n	8002bf4 <StartTask02+0x11c>
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	ee37 7a26 	vadd.f32	s14, s14, s13
			A1=buf[j];
 8002be6:	eef4 7a47 	vcmp.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	bfc8      	it	gt
 8002bf0:	eeb0 8a67 	vmovgt.f32	s16, s15
 8002bf4:	3304      	adds	r3, #4
	for(int j=1; j<(nmax/2); j++){
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d1e6      	bne.n	8002bc8 <StartTask02+0xf0>
	}

	for(int j=1; j<(nmax/2); j++){
			if(  (buf[j]<(buf[j+1]-tol)) && (buf[j]<(buf[j-1]-tol))   )
 8002bfa:	edd4 7a01 	vldr	s15, [r4, #4]
 8002bfe:	ed94 7a02 	vldr	s14, [r4, #8]
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d508      	bpl.n	8002c1e <StartTask02+0x146>
 8002c0c:	ed94 7a00 	vldr	s14, [r4]
				A1=buf[j];
 8002c10:	eef4 7a47 	vcmp.f32	s15, s14
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	bf48      	it	mi
 8002c1a:	eeb0 8a67 	vmovmi.f32	s16, s15
 8002c1e:	3404      	adds	r4, #4
	for(int j=1; j<(nmax/2); j++){
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d1ea      	bne.n	8002bfa <StartTask02+0x122>
 8002c24:	f20d 635c 	addw	r3, sp, #1628	; 0x65c
 8002c28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		}

	t = nmax-m;
	for(int k=t; k<nmax; k++){
		sum=sum + buf[k];
 8002c2c:	ecb3 7a01 	vldmia	r3!, {s14}
	for(int k=t; k<nmax; k++){
 8002c30:	42ab      	cmp	r3, r5
		sum=sum + buf[k];
 8002c32:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(int k=t; k<nmax; k++){
 8002c36:	d1f9      	bne.n	8002c2c <StartTask02+0x154>
		}
	 	 A0 = (1*sum)/(m+1);
 8002c38:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002c3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   		r1 = A1/((A1-A2)+0.01);          //avoid division by zero
 8002c40:	ee18 0a10 	vmov	r0, s16
   		r2 = A1/A0;
 8002c44:	eec8 8a07 	vdiv.f32	s17, s16, s14
   		r1 = A1/((A1-A2)+0.01);          //avoid division by zero
 8002c48:	f7fd fc36 	bl	80004b8 <__aeabi_f2d>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	460d      	mov	r5, r1
 8002c50:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002d54 <StartTask02+0x27c>
 8002c54:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002c58:	ee17 0a90 	vmov	r0, s15
 8002c5c:	f7fd fc2c 	bl	80004b8 <__aeabi_f2d>
 8002c60:	a32f      	add	r3, pc, #188	; (adr r3, 8002d20 <StartTask02+0x248>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fac9 	bl	80001fc <__adddf3>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd fd9f 	bl	80007b4 <__aeabi_ddiv>
 8002c76:	f7fd ff4b 	bl	8000b10 <__aeabi_d2f>
 8002c7a:	ee00 0a10 	vmov	s0, r0
   		r2n = r2/1.6;

   		float_to_string(r1, r1_char);
 8002c7e:	a803      	add	r0, sp, #12
 8002c80:	f7ff fdea 	bl	8002858 <float_to_string>
   		HAL_UART_Transmit(&huart2,"r1", strlen("r1"), timeout);
 8002c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4933      	ldr	r1, [pc, #204]	; (8002d58 <StartTask02+0x280>)
 8002c8c:	482b      	ldr	r0, [pc, #172]	; (8002d3c <StartTask02+0x264>)
 8002c8e:	f7fe ff45 	bl	8001b1c <HAL_UART_Transmit>
   		HAL_UART_Transmit(&huart2,r1_char, strlen(r1_char), timeout);
 8002c92:	a803      	add	r0, sp, #12
 8002c94:	f7fd faa4 	bl	80001e0 <strlen>
 8002c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9c:	b282      	uxth	r2, r0
 8002c9e:	a903      	add	r1, sp, #12
 8002ca0:	4826      	ldr	r0, [pc, #152]	; (8002d3c <StartTask02+0x264>)
 8002ca2:	f7fe ff3b 	bl	8001b1c <HAL_UART_Transmit>

   		float_to_string(r2, r2_char);
 8002ca6:	eeb0 0a68 	vmov.f32	s0, s17
 8002caa:	a806      	add	r0, sp, #24
 8002cac:	f7ff fdd4 	bl	8002858 <float_to_string>
   		HAL_UART_Transmit(&huart2,"r2", strlen("r2"), timeout);
 8002cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4929      	ldr	r1, [pc, #164]	; (8002d5c <StartTask02+0x284>)
 8002cb8:	4820      	ldr	r0, [pc, #128]	; (8002d3c <StartTask02+0x264>)
 8002cba:	f7fe ff2f 	bl	8001b1c <HAL_UART_Transmit>
   	  	HAL_UART_Transmit(&huart2,r2_char, strlen(r2_char), timeout);
 8002cbe:	a806      	add	r0, sp, #24
 8002cc0:	f7fd fa8e 	bl	80001e0 <strlen>
 8002cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc8:	b282      	uxth	r2, r0
 8002cca:	a906      	add	r1, sp, #24
 8002ccc:	481b      	ldr	r0, [pc, #108]	; (8002d3c <StartTask02+0x264>)
 8002cce:	f7fe ff25 	bl	8001b1c <HAL_UART_Transmit>
   		r2n = r2/1.6;
 8002cd2:	ee18 0a90 	vmov	r0, s17
 8002cd6:	f7fd fbef 	bl	80004b8 <__aeabi_f2d>
 8002cda:	a313      	add	r3, pc, #76	; (adr r3, 8002d28 <StartTask02+0x250>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f7fd fd68 	bl	80007b4 <__aeabi_ddiv>
 8002ce4:	f7fd ff14 	bl	8000b10 <__aeabi_d2f>
 8002ce8:	ee00 0a10 	vmov	s0, r0

   	  	float_to_string(r2n, r2n_char);
 8002cec:	a809      	add	r0, sp, #36	; 0x24
 8002cee:	f7ff fdb3 	bl	8002858 <float_to_string>
   	    HAL_UART_Transmit(&huart2,"rn", strlen("rn"), timeout);
 8002cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4919      	ldr	r1, [pc, #100]	; (8002d60 <StartTask02+0x288>)
 8002cfa:	4810      	ldr	r0, [pc, #64]	; (8002d3c <StartTask02+0x264>)
 8002cfc:	f7fe ff0e 	bl	8001b1c <HAL_UART_Transmit>
   	    HAL_UART_Transmit(&huart2,r2n_char, strlen(r2n_char), timeout);
 8002d00:	a809      	add	r0, sp, #36	; 0x24
 8002d02:	f7fd fa6d 	bl	80001e0 <strlen>
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	b282      	uxth	r2, r0
 8002d0c:	a909      	add	r1, sp, #36	; 0x24
 8002d0e:	480b      	ldr	r0, [pc, #44]	; (8002d3c <StartTask02+0x264>)
 8002d10:	f7fe ff04 	bl	8001b1c <HAL_UART_Transmit>
 8002d14:	e7fe      	b.n	8002d14 <StartTask02+0x23c>
 8002d16:	bf00      	nop
 8002d18:	66666666 	.word	0x66666666
 8002d1c:	400a6666 	.word	0x400a6666
 8002d20:	47ae147b 	.word	0x47ae147b
 8002d24:	3f847ae1 	.word	0x3f847ae1
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3ff99999 	.word	0x3ff99999
 8002d30:	20003de0 	.word	0x20003de0
 8002d34:	3f700000 	.word	0x3f700000
 8002d38:	43340000 	.word	0x43340000
 8002d3c:	20003e80 	.word	0x20003e80
 8002d40:	08004367 	.word	0x08004367
 8002d44:	20003e28 	.word	0x20003e28
 8002d48:	080043a0 	.word	0x080043a0
 8002d4c:	40133333 	.word	0x40133333
 8002d50:	00000000 	.word	0x00000000
 8002d54:	3f8ccccd 	.word	0x3f8ccccd
 8002d58:	080043b0 	.word	0x080043b0
 8002d5c:	080043b3 	.word	0x080043b3
 8002d60:	080043b6 	.word	0x080043b6

08002d64 <SystemClock_Config>:
{
 8002d64:	b530      	push	{r4, r5, lr}
 8002d66:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <SystemClock_Config+0x90>)
 8002d6c:	9201      	str	r2, [sp, #4]
 8002d6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d70:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d74:	6419      	str	r1, [r3, #64]	; 0x40
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d82:	9202      	str	r2, [sp, #8]
 8002d84:	680b      	ldr	r3, [r1, #0]
 8002d86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d92:	920e      	str	r2, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da0:	2301      	movs	r3, #1
 8002da2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002da6:	2310      	movs	r3, #16
 8002da8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002daa:	f7fe fa8d 	bl	80012c8 <HAL_RCC_OscConfig>
 8002dae:	4601      	mov	r1, r0
 8002db0:	b100      	cbz	r0, 8002db4 <SystemClock_Config+0x50>
 8002db2:	e7fe      	b.n	8002db2 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002db4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002db8:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dba:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbc:	240f      	movs	r4, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dbe:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc0:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dc2:	f7fe fc4f 	bl	8001664 <HAL_RCC_ClockConfig>
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	b100      	cbz	r0, 8002dcc <SystemClock_Config+0x68>
 8002dca:	e7fe      	b.n	8002dca <SystemClock_Config+0x66>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002dcc:	f7fe fd00 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dd8:	f7fe f97e 	bl	80010d8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ddc:	2004      	movs	r0, #4
 8002dde:	f7fe f991 	bl	8001104 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002de2:	462a      	mov	r2, r5
 8002de4:	4621      	mov	r1, r4
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	f7fe f941 	bl	8001070 <HAL_NVIC_SetPriority>
}
 8002dee:	b015      	add	sp, #84	; 0x54
 8002df0:	bd30      	pop	{r4, r5, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000

08002dfc <UART1_pins_config>:
{
 8002dfc:	b507      	push	{r0, r1, r2, lr}
	      __GPIOA_CLK_ENABLE();
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <UART1_pins_config+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	9200      	str	r2, [sp, #0]
 8002e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e06:	f041 0101 	orr.w	r1, r1, #1
 8002e0a:	6319      	str	r1, [r3, #48]	; 0x30
 8002e0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0e:	f001 0101 	and.w	r1, r1, #1
 8002e12:	9100      	str	r1, [sp, #0]
 8002e14:	9900      	ldr	r1, [sp, #0]
	      __USART1_CLK_ENABLE();
 8002e16:	9201      	str	r2, [sp, #4]
 8002e18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e1a:	f041 0110 	orr.w	r1, r1, #16
 8002e1e:	6459      	str	r1, [r3, #68]	; 0x44
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	      GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e22:	490b      	ldr	r1, [pc, #44]	; (8002e50 <UART1_pins_config+0x54>)
	      __USART1_CLK_ENABLE();
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	9b01      	ldr	r3, [sp, #4]
	      GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e2c:	60ca      	str	r2, [r1, #12]
	      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2e:	f04f 0e01 	mov.w	lr, #1
 8002e32:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002e36:	2302      	movs	r3, #2
 8002e38:	e881 4009 	stmia.w	r1, {r0, r3, lr}
	      GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e3c:	2307      	movs	r3, #7
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <UART1_pins_config+0x58>)
	      GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e40:	610b      	str	r3, [r1, #16]
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f7fe f96b 	bl	800111c <HAL_GPIO_Init>
}
 8002e46:	b003      	add	sp, #12
 8002e48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	20003e68 	.word	0x20003e68
 8002e54:	40020000 	.word	0x40020000

08002e58 <UART2_pins_config>:
{
 8002e58:	b507      	push	{r0, r1, r2, lr}
      __GPIOA_CLK_ENABLE();
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <UART2_pins_config+0x50>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	9200      	str	r2, [sp, #0]
 8002e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e62:	f041 0101 	orr.w	r1, r1, #1
 8002e66:	6319      	str	r1, [r3, #48]	; 0x30
 8002e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6a:	f001 0101 	and.w	r1, r1, #1
 8002e6e:	9100      	str	r1, [sp, #0]
 8002e70:	9900      	ldr	r1, [sp, #0]
      __USART2_CLK_ENABLE();
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e76:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002e7a:	6419      	str	r1, [r3, #64]	; 0x40
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e7e:	490b      	ldr	r1, [pc, #44]	; (8002eac <UART2_pins_config+0x54>)
      __USART2_CLK_ENABLE();
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	9b01      	ldr	r3, [sp, #4]
      GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e88:	60ca      	str	r2, [r1, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e8a:	f04f 0e01 	mov.w	lr, #1
 8002e8e:	200c      	movs	r0, #12
 8002e90:	2302      	movs	r3, #2
 8002e92:	e881 4009 	stmia.w	r1, {r0, r3, lr}
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e96:	2307      	movs	r3, #7
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <UART2_pins_config+0x58>)
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	610b      	str	r3, [r1, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f7fe f93e 	bl	800111c <HAL_GPIO_Init>
}
 8002ea0:	b003      	add	sp, #12
 8002ea2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	20003e68 	.word	0x20003e68
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <main>:
{
 8002eb4:	b500      	push	{lr}
 8002eb6:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb8:	2500      	movs	r5, #0
  HAL_Init();
 8002eba:	f7fd fe8d 	bl	8000bd8 <HAL_Init>
  SystemClock_Config();
 8002ebe:	f7ff ff51 	bl	8002d64 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <main+0x114>)
 8002ec4:	9500      	str	r5, [sp, #0]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec8:	4840      	ldr	r0, [pc, #256]	; (8002fcc <main+0x118>)
  hadc1.Instance = ADC1;
 8002eca:	4c41      	ldr	r4, [pc, #260]	; (8002fd0 <main+0x11c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed4:	f002 0204 	and.w	r2, r2, #4
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002edc:	9501      	str	r5, [sp, #4]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	9508      	str	r5, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002efa:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	f7fe f90e 	bl	800111c <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <main+0x120>)
  hadc1.Init.ScanConvMode = DISABLE;
 8002f02:	6125      	str	r5, [r4, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f04:	e884 0028 	stmia.w	r4, {r3, r5}
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  hadc1.Init.NbrOfConversion = 1;
 8002f0c:	2601      	movs	r6, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002f0e:	60a3      	str	r3, [r4, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f10:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f12:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <main+0x124>)
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f14:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f16:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f18:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f1a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f1c:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f1e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f20:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f22:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f24:	f7fd fe80 	bl	8000c28 <HAL_ADC_Init>
 8002f28:	b100      	cbz	r0, 8002f2c <main+0x78>
 8002f2a:	e7fe      	b.n	8002f2a <main+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 8002f2c:	9007      	str	r0, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f2e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f30:	a907      	add	r1, sp, #28
 8002f32:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8002f34:	9608      	str	r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f36:	f7fd fff3 	bl	8000f20 <HAL_ADC_ConfigChannel>
 8002f3a:	b100      	cbz	r0, 8002f3e <main+0x8a>
 8002f3c:	e7fe      	b.n	8002f3c <main+0x88>
  huart1.Instance = USART1;
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <main+0x128>)
  huart1.Init.BaudRate = 9600;
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <main+0x12c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8002f44:	f44f 5616 	mov.w	r6, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f48:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f4a:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	250c      	movs	r5, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f52:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 8002f54:	e883 0044 	stmia.w	r3, {r2, r6}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f58:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f5a:	f7fe fdb1 	bl	8001ac0 <HAL_UART_Init>
 8002f5e:	b100      	cbz	r0, 8002f62 <main+0xae>
 8002f60:	e7fe      	b.n	8002f60 <main+0xac>
  huart2.Instance = USART2;
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <main+0x130>)
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <main+0x134>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f68:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f6a:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6c:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f70:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 9600;
 8002f72:	e883 0044 	stmia.w	r3, {r2, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f76:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f78:	f7fe fda2 	bl	8001ac0 <HAL_UART_Init>
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	b100      	cbz	r0, 8002f82 <main+0xce>
 8002f80:	e7fe      	b.n	8002f80 <main+0xcc>
  UART1_pins_config();			//The same as HAL_UART_MspInit(huart1) but speed setup as LOW
 8002f82:	f7ff ff3b 	bl	8002dfc <UART1_pins_config>
  UART2_pins_config();			//The same as HAL_UART_MspInit(huart2) but speed setup as LOW
 8002f86:	f7ff ff67 	bl	8002e58 <UART2_pins_config>
  HAL_ADC_MspInit(&hadc1);
 8002f8a:	4620      	mov	r0, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f8c:	4c17      	ldr	r4, [pc, #92]	; (8002fec <main+0x138>)
  HAL_ADC_MspInit(&hadc1);
 8002f8e:	f000 f863 	bl	8003058 <HAL_ADC_MspInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	ad02      	add	r5, sp, #8
 8002f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f98:	f854 3b04 	ldr.w	r3, [r4], #4
 8002f9c:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	a802      	add	r0, sp, #8
 8002fa2:	f7fe fe7d 	bl	8001ca0 <osThreadCreate>
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <main+0x13c>)
 8002fa8:	6018      	str	r0, [r3, #0]
  osThreadDef(adc_sensor, StartTask02, osPriorityIdle, 1, 128);
 8002faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fac:	ad07      	add	r5, sp, #28
 8002fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	602b      	str	r3, [r5, #0]
  adc_sensorHandle = osThreadCreate(osThread(adc_sensor), NULL);
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	a807      	add	r0, sp, #28
 8002fb8:	f7fe fe72 	bl	8001ca0 <osThreadCreate>
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <main+0x140>)
 8002fbe:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002fc0:	f7fe fe69 	bl	8001c96 <osKernelStart>
 8002fc4:	e7fe      	b.n	8002fc4 <main+0x110>
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	20003de0 	.word	0x20003de0
 8002fd4:	40012000 	.word	0x40012000
 8002fd8:	0f000001 	.word	0x0f000001
 8002fdc:	20003e28 	.word	0x20003e28
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	20003e80 	.word	0x20003e80
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	08004310 	.word	0x08004310
 8002ff0:	20003ddc 	.word	0x20003ddc
 8002ff4:	20003e7c 	.word	0x20003e7c

08002ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	f7fe f826 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	4611      	mov	r1, r2
 8003004:	f06f 000b 	mvn.w	r0, #11
 8003008:	f7fe f832 	bl	8001070 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	4611      	mov	r1, r2
 8003010:	f06f 000a 	mvn.w	r0, #10
 8003014:	f7fe f82c 	bl	8001070 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	4611      	mov	r1, r2
 800301c:	f06f 0009 	mvn.w	r0, #9
 8003020:	f7fe f826 	bl	8001070 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	4611      	mov	r1, r2
 8003028:	f06f 0004 	mvn.w	r0, #4
 800302c:	f7fe f820 	bl	8001070 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	4611      	mov	r1, r2
 8003034:	f06f 0003 	mvn.w	r0, #3
 8003038:	f7fe f81a 	bl	8001070 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	210f      	movs	r1, #15
 8003040:	f06f 0001 	mvn.w	r0, #1
 8003044:	f7fe f814 	bl	8001070 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003054:	f7fe b80c 	b.w	8001070 <HAL_NVIC_SetPriority>

08003058 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_ADC_MspInit+0x3c>)
 800305e:	429a      	cmp	r2, r3
 8003060:	d114      	bne.n	800308c <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003062:	2100      	movs	r1, #0
 8003064:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003068:	9100      	str	r1, [sp, #0]
 800306a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	480a      	ldr	r0, [pc, #40]	; (8003098 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800306e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003082:	2303      	movs	r3, #3
 8003084:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003086:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003088:	f7fe f848 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800308c:	b007      	add	sp, #28
 800308e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003092:	bf00      	nop
 8003094:	40012000 	.word	0x40012000
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800309c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800309e:	6803      	ldr	r3, [r0, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_UART_MspInit+0x6c>)
 80030a2:	4293      	cmp	r3, r2
{
 80030a4:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 80030a6:	d11d      	bne.n	80030e4 <HAL_UART_MspInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_UART_MspInit+0x70>)
 80030ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b0:	f042 0210 	orr.w	r2, r2, #16
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ca:	2301      	movs	r3, #1
 80030cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	480e      	ldr	r0, [pc, #56]	; (8003110 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f7fe f81f 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030de:	b009      	add	sp, #36	; 0x24
 80030e0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART2)
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_UART_MspInit+0x78>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d1f9      	bne.n	80030de <HAL_UART_MspInit+0x42>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <HAL_UART_MspInit+0x70>)
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003102:	230c      	movs	r3, #12
 8003104:	e7de      	b.n	80030c4 <HAL_UART_MspInit+0x28>
 8003106:	bf00      	nop
 8003108:	40011000 	.word	0x40011000
 800310c:	40023800 	.word	0x40023800
 8003110:	40020000 	.word	0x40020000
 8003114:	40004400 	.word	0x40004400

08003118 <NMI_Handler>:
 8003118:	4770      	bx	lr

0800311a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800311a:	e7fe      	b.n	800311a <HardFault_Handler>

0800311c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800311c:	e7fe      	b.n	800311c <MemManage_Handler>

0800311e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800311e:	e7fe      	b.n	800311e <BusFault_Handler>

08003120 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003120:	e7fe      	b.n	8003120 <UsageFault_Handler>

08003122 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003122:	4770      	bx	lr

08003124 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003126:	f7fd fd71 	bl	8000c0c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800312a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 800312e:	f7fe bdd7 	b.w	8001ce0 <osSystickHandler>
	...

08003134 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	490f      	ldr	r1, [pc, #60]	; (8003174 <SystemInit+0x40>)
 8003136:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800313a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <SystemInit+0x44>)
 8003144:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003146:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800314e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800315a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800315c:	4a07      	ldr	r2, [pc, #28]	; (800317c <SystemInit+0x48>)
 800315e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003166:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003168:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800316a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800316e:	608b      	str	r3, [r1, #8]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00
 8003178:	40023800 	.word	0x40023800
 800317c:	24003010 	.word	0x24003010

08003180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003184:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003186:	e003      	b.n	8003190 <LoopCopyDataInit>

08003188 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800318a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800318c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800318e:	3104      	adds	r1, #4

08003190 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003190:	480b      	ldr	r0, [pc, #44]	; (80031c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003194:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003196:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003198:	d3f6      	bcc.n	8003188 <CopyDataInit>
  ldr  r2, =_sbss
 800319a:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800319c:	e002      	b.n	80031a4 <LoopFillZerobss>

0800319e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800319e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031a0:	f842 3b04 	str.w	r3, [r2], #4

080031a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031a8:	d3f9      	bcc.n	800319e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031aa:	f7ff ffc3 	bl	8003134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ae:	f000 f811 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b2:	f7ff fe7f 	bl	8002eb4 <main>
  bx  lr    
 80031b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80031bc:	08004438 	.word	0x08004438
  ldr  r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031c4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80031c8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80031cc:	20003ec0 	.word	0x20003ec0

080031d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d0:	e7fe      	b.n	80031d0 <ADC_IRQHandler>
	...

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4e0d      	ldr	r6, [pc, #52]	; (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031da:	1ba4      	subs	r4, r4, r6
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2500      	movs	r5, #0
 80031e0:	42a5      	cmp	r5, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4e0b      	ldr	r6, [pc, #44]	; (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <__libc_init_array+0x44>)
 80031e8:	f001 f884 	bl	80042f4 <_init>
 80031ec:	1ba4      	subs	r4, r4, r6
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2500      	movs	r5, #0
 80031f2:	42a5      	cmp	r5, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031fc:	4798      	blx	r3
 80031fe:	3501      	adds	r5, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003206:	4798      	blx	r3
 8003208:	3501      	adds	r5, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08004430 	.word	0x08004430
 8003210:	08004430 	.word	0x08004430
 8003214:	08004430 	.word	0x08004430
 8003218:	08004434 	.word	0x08004434

0800321c <pow>:
 800321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003220:	ed2d 8b04 	vpush	{d8-d9}
 8003224:	b08d      	sub	sp, #52	; 0x34
 8003226:	ec57 6b10 	vmov	r6, r7, d0
 800322a:	ec55 4b11 	vmov	r4, r5, d1
 800322e:	f000 f96f 	bl	8003510 <__ieee754_pow>
 8003232:	4bae      	ldr	r3, [pc, #696]	; (80034ec <pow+0x2d0>)
 8003234:	eeb0 8a40 	vmov.f32	s16, s0
 8003238:	eef0 8a60 	vmov.f32	s17, s1
 800323c:	f993 9000 	ldrsb.w	r9, [r3]
 8003240:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003244:	4698      	mov	r8, r3
 8003246:	d05f      	beq.n	8003308 <pow+0xec>
 8003248:	4622      	mov	r2, r4
 800324a:	462b      	mov	r3, r5
 800324c:	4620      	mov	r0, r4
 800324e:	4629      	mov	r1, r5
 8003250:	f7fd fc20 	bl	8000a94 <__aeabi_dcmpun>
 8003254:	4683      	mov	fp, r0
 8003256:	2800      	cmp	r0, #0
 8003258:	d156      	bne.n	8003308 <pow+0xec>
 800325a:	4632      	mov	r2, r6
 800325c:	463b      	mov	r3, r7
 800325e:	4630      	mov	r0, r6
 8003260:	4639      	mov	r1, r7
 8003262:	f7fd fc17 	bl	8000a94 <__aeabi_dcmpun>
 8003266:	9001      	str	r0, [sp, #4]
 8003268:	b1e8      	cbz	r0, 80032a6 <pow+0x8a>
 800326a:	2200      	movs	r2, #0
 800326c:	2300      	movs	r3, #0
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fd fbdd 	bl	8000a30 <__aeabi_dcmpeq>
 8003276:	2800      	cmp	r0, #0
 8003278:	d046      	beq.n	8003308 <pow+0xec>
 800327a:	2301      	movs	r3, #1
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	4b9c      	ldr	r3, [pc, #624]	; (80034f0 <pow+0x2d4>)
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <pow+0x2d8>)
 8003284:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003288:	2200      	movs	r2, #0
 800328a:	f1b9 0f02 	cmp.w	r9, #2
 800328e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003292:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003296:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800329a:	d033      	beq.n	8003304 <pow+0xe8>
 800329c:	a802      	add	r0, sp, #8
 800329e:	f000 ff08 	bl	80040b2 <matherr>
 80032a2:	bb48      	cbnz	r0, 80032f8 <pow+0xdc>
 80032a4:	e05e      	b.n	8003364 <pow+0x148>
 80032a6:	f04f 0a00 	mov.w	sl, #0
 80032aa:	f04f 0b00 	mov.w	fp, #0
 80032ae:	4652      	mov	r2, sl
 80032b0:	465b      	mov	r3, fp
 80032b2:	4630      	mov	r0, r6
 80032b4:	4639      	mov	r1, r7
 80032b6:	f7fd fbbb 	bl	8000a30 <__aeabi_dcmpeq>
 80032ba:	ec4b ab19 	vmov	d9, sl, fp
 80032be:	2800      	cmp	r0, #0
 80032c0:	d055      	beq.n	800336e <pow+0x152>
 80032c2:	4652      	mov	r2, sl
 80032c4:	465b      	mov	r3, fp
 80032c6:	4620      	mov	r0, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	f7fd fbb1 	bl	8000a30 <__aeabi_dcmpeq>
 80032ce:	4680      	mov	r8, r0
 80032d0:	b318      	cbz	r0, 800331a <pow+0xfe>
 80032d2:	2301      	movs	r3, #1
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	4b86      	ldr	r3, [pc, #536]	; (80034f0 <pow+0x2d4>)
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	9b01      	ldr	r3, [sp, #4]
 80032dc:	930a      	str	r3, [sp, #40]	; 0x28
 80032de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80032e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80032e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80032ea:	f1b9 0f00 	cmp.w	r9, #0
 80032ee:	d0d5      	beq.n	800329c <pow+0x80>
 80032f0:	4b80      	ldr	r3, [pc, #512]	; (80034f4 <pow+0x2d8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032fa:	b11b      	cbz	r3, 8003304 <pow+0xe8>
 80032fc:	f000 fff4 	bl	80042e8 <__errno>
 8003300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003302:	6003      	str	r3, [r0, #0]
 8003304:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003308:	eeb0 0a48 	vmov.f32	s0, s16
 800330c:	eef0 0a68 	vmov.f32	s1, s17
 8003310:	b00d      	add	sp, #52	; 0x34
 8003312:	ecbd 8b04 	vpop	{d8-d9}
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331a:	ec45 4b10 	vmov	d0, r4, r5
 800331e:	f000 fec0 	bl	80040a2 <finite>
 8003322:	2800      	cmp	r0, #0
 8003324:	d0f0      	beq.n	8003308 <pow+0xec>
 8003326:	4652      	mov	r2, sl
 8003328:	465b      	mov	r3, fp
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fd fb89 	bl	8000a44 <__aeabi_dcmplt>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0e8      	beq.n	8003308 <pow+0xec>
 8003336:	2301      	movs	r3, #1
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <pow+0x2d4>)
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <pow+0x2d0>)
 8003340:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003344:	f993 3000 	ldrsb.w	r3, [r3]
 8003348:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800334c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003350:	b913      	cbnz	r3, 8003358 <pow+0x13c>
 8003352:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003356:	e7a1      	b.n	800329c <pow+0x80>
 8003358:	4967      	ldr	r1, [pc, #412]	; (80034f8 <pow+0x2dc>)
 800335a:	2000      	movs	r0, #0
 800335c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d19b      	bne.n	800329c <pow+0x80>
 8003364:	f000 ffc0 	bl	80042e8 <__errno>
 8003368:	2321      	movs	r3, #33	; 0x21
 800336a:	6003      	str	r3, [r0, #0]
 800336c:	e7c4      	b.n	80032f8 <pow+0xdc>
 800336e:	eeb0 0a48 	vmov.f32	s0, s16
 8003372:	eef0 0a68 	vmov.f32	s1, s17
 8003376:	f000 fe94 	bl	80040a2 <finite>
 800337a:	9001      	str	r0, [sp, #4]
 800337c:	2800      	cmp	r0, #0
 800337e:	f040 808a 	bne.w	8003496 <pow+0x27a>
 8003382:	ec47 6b10 	vmov	d0, r6, r7
 8003386:	f000 fe8c 	bl	80040a2 <finite>
 800338a:	2800      	cmp	r0, #0
 800338c:	f000 8083 	beq.w	8003496 <pow+0x27a>
 8003390:	ec45 4b10 	vmov	d0, r4, r5
 8003394:	f000 fe85 	bl	80040a2 <finite>
 8003398:	2800      	cmp	r0, #0
 800339a:	d07c      	beq.n	8003496 <pow+0x27a>
 800339c:	ec53 2b18 	vmov	r2, r3, d8
 80033a0:	ee18 0a10 	vmov	r0, s16
 80033a4:	4619      	mov	r1, r3
 80033a6:	f7fd fb75 	bl	8000a94 <__aeabi_dcmpun>
 80033aa:	f998 9000 	ldrsb.w	r9, [r8]
 80033ae:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <pow+0x2d4>)
 80033b0:	b1b0      	cbz	r0, 80033e0 <pow+0x1c4>
 80033b2:	2201      	movs	r2, #1
 80033b4:	9303      	str	r3, [sp, #12]
 80033b6:	9b01      	ldr	r3, [sp, #4]
 80033b8:	9202      	str	r2, [sp, #8]
 80033ba:	930a      	str	r3, [sp, #40]	; 0x28
 80033bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80033c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80033c4:	f1b9 0f00 	cmp.w	r9, #0
 80033c8:	d0c3      	beq.n	8003352 <pow+0x136>
 80033ca:	4652      	mov	r2, sl
 80033cc:	465b      	mov	r3, fp
 80033ce:	4650      	mov	r0, sl
 80033d0:	4659      	mov	r1, fp
 80033d2:	f7fd f9ef 	bl	80007b4 <__aeabi_ddiv>
 80033d6:	f1b9 0f02 	cmp.w	r9, #2
 80033da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80033de:	e7c0      	b.n	8003362 <pow+0x146>
 80033e0:	2203      	movs	r2, #3
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	9303      	str	r3, [sp, #12]
 80033e6:	900a      	str	r0, [sp, #40]	; 0x28
 80033e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80033ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80033f0:	f1b9 0f00 	cmp.w	r9, #0
 80033f4:	d12c      	bne.n	8003450 <pow+0x234>
 80033f6:	4b41      	ldr	r3, [pc, #260]	; (80034fc <pow+0x2e0>)
 80033f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80033fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003400:	4630      	mov	r0, r6
 8003402:	4652      	mov	r2, sl
 8003404:	465b      	mov	r3, fp
 8003406:	4639      	mov	r1, r7
 8003408:	f7fd fb1c 	bl	8000a44 <__aeabi_dcmplt>
 800340c:	2800      	cmp	r0, #0
 800340e:	d066      	beq.n	80034de <pow+0x2c2>
 8003410:	2200      	movs	r2, #0
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <pow+0x2e4>)
 8003414:	4620      	mov	r0, r4
 8003416:	4629      	mov	r1, r5
 8003418:	f7fd f8a2 	bl	8000560 <__aeabi_dmul>
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	ec45 4b10 	vmov	d0, r4, r5
 8003424:	f000 fe50 	bl	80040c8 <rint>
 8003428:	4620      	mov	r0, r4
 800342a:	ec53 2b10 	vmov	r2, r3, d0
 800342e:	4629      	mov	r1, r5
 8003430:	f7fd fafe 	bl	8000a30 <__aeabi_dcmpeq>
 8003434:	b920      	cbnz	r0, 8003440 <pow+0x224>
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <pow+0x2e8>)
 8003438:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800343c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003440:	f998 3000 	ldrsb.w	r3, [r8]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d14a      	bne.n	80034de <pow+0x2c2>
 8003448:	f000 ff4e 	bl	80042e8 <__errno>
 800344c:	2322      	movs	r3, #34	; 0x22
 800344e:	e78c      	b.n	800336a <pow+0x14e>
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <pow+0x2ec>)
 8003452:	2200      	movs	r2, #0
 8003454:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003458:	4630      	mov	r0, r6
 800345a:	4652      	mov	r2, sl
 800345c:	465b      	mov	r3, fp
 800345e:	4639      	mov	r1, r7
 8003460:	f7fd faf0 	bl	8000a44 <__aeabi_dcmplt>
 8003464:	2800      	cmp	r0, #0
 8003466:	d0eb      	beq.n	8003440 <pow+0x224>
 8003468:	2200      	movs	r2, #0
 800346a:	4b25      	ldr	r3, [pc, #148]	; (8003500 <pow+0x2e4>)
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f7fd f876 	bl	8000560 <__aeabi_dmul>
 8003474:	4604      	mov	r4, r0
 8003476:	460d      	mov	r5, r1
 8003478:	ec45 4b10 	vmov	d0, r4, r5
 800347c:	f000 fe24 	bl	80040c8 <rint>
 8003480:	4620      	mov	r0, r4
 8003482:	ec53 2b10 	vmov	r2, r3, d0
 8003486:	4629      	mov	r1, r5
 8003488:	f7fd fad2 	bl	8000a30 <__aeabi_dcmpeq>
 800348c:	2800      	cmp	r0, #0
 800348e:	d1d7      	bne.n	8003440 <pow+0x224>
 8003490:	2200      	movs	r2, #0
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <pow+0x2dc>)
 8003494:	e7d2      	b.n	800343c <pow+0x220>
 8003496:	2200      	movs	r2, #0
 8003498:	2300      	movs	r3, #0
 800349a:	ec51 0b18 	vmov	r0, r1, d8
 800349e:	f7fd fac7 	bl	8000a30 <__aeabi_dcmpeq>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	f43f af30 	beq.w	8003308 <pow+0xec>
 80034a8:	ec47 6b10 	vmov	d0, r6, r7
 80034ac:	f000 fdf9 	bl	80040a2 <finite>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	f43f af29 	beq.w	8003308 <pow+0xec>
 80034b6:	ec45 4b10 	vmov	d0, r4, r5
 80034ba:	f000 fdf2 	bl	80040a2 <finite>
 80034be:	2800      	cmp	r0, #0
 80034c0:	f43f af22 	beq.w	8003308 <pow+0xec>
 80034c4:	2304      	movs	r3, #4
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <pow+0x2d4>)
 80034ca:	9303      	str	r3, [sp, #12]
 80034cc:	2300      	movs	r3, #0
 80034ce:	930a      	str	r3, [sp, #40]	; 0x28
 80034d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80034d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80034d8:	ed8d 9b08 	vstr	d9, [sp, #32]
 80034dc:	e7b0      	b.n	8003440 <pow+0x224>
 80034de:	a802      	add	r0, sp, #8
 80034e0:	f000 fde7 	bl	80040b2 <matherr>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	f47f af07 	bne.w	80032f8 <pow+0xdc>
 80034ea:	e7ad      	b.n	8003448 <pow+0x22c>
 80034ec:	20000008 	.word	0x20000008
 80034f0:	080043e8 	.word	0x080043e8
 80034f4:	3ff00000 	.word	0x3ff00000
 80034f8:	fff00000 	.word	0xfff00000
 80034fc:	47efffff 	.word	0x47efffff
 8003500:	3fe00000 	.word	0x3fe00000
 8003504:	c7efffff 	.word	0xc7efffff
 8003508:	7ff00000 	.word	0x7ff00000
 800350c:	00000000 	.word	0x00000000

08003510 <__ieee754_pow>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	b091      	sub	sp, #68	; 0x44
 8003516:	ed8d 1b00 	vstr	d1, [sp]
 800351a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800351e:	ec57 6b10 	vmov	r6, r7, d0
 8003522:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003526:	ea58 0302 	orrs.w	r3, r8, r2
 800352a:	ee10 aa10 	vmov	sl, s0
 800352e:	463d      	mov	r5, r7
 8003530:	f000 84bd 	beq.w	8003eae <__ieee754_pow+0x99e>
 8003534:	4b78      	ldr	r3, [pc, #480]	; (8003718 <__ieee754_pow+0x208>)
 8003536:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800353a:	429c      	cmp	r4, r3
 800353c:	dc09      	bgt.n	8003552 <__ieee754_pow+0x42>
 800353e:	d103      	bne.n	8003548 <__ieee754_pow+0x38>
 8003540:	b93e      	cbnz	r6, 8003552 <__ieee754_pow+0x42>
 8003542:	45a0      	cmp	r8, r4
 8003544:	dc0d      	bgt.n	8003562 <__ieee754_pow+0x52>
 8003546:	e001      	b.n	800354c <__ieee754_pow+0x3c>
 8003548:	4598      	cmp	r8, r3
 800354a:	dc02      	bgt.n	8003552 <__ieee754_pow+0x42>
 800354c:	4598      	cmp	r8, r3
 800354e:	d10e      	bne.n	800356e <__ieee754_pow+0x5e>
 8003550:	b16a      	cbz	r2, 800356e <__ieee754_pow+0x5e>
 8003552:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003556:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800355a:	ea54 030a 	orrs.w	r3, r4, sl
 800355e:	f000 84a6 	beq.w	8003eae <__ieee754_pow+0x99e>
 8003562:	486e      	ldr	r0, [pc, #440]	; (800371c <__ieee754_pow+0x20c>)
 8003564:	b011      	add	sp, #68	; 0x44
 8003566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356a:	f000 bda5 	b.w	80040b8 <nan>
 800356e:	2d00      	cmp	r5, #0
 8003570:	da53      	bge.n	800361a <__ieee754_pow+0x10a>
 8003572:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <__ieee754_pow+0x210>)
 8003574:	4598      	cmp	r8, r3
 8003576:	dc4d      	bgt.n	8003614 <__ieee754_pow+0x104>
 8003578:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800357c:	4598      	cmp	r8, r3
 800357e:	dd4c      	ble.n	800361a <__ieee754_pow+0x10a>
 8003580:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003584:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003588:	2b14      	cmp	r3, #20
 800358a:	dd26      	ble.n	80035da <__ieee754_pow+0xca>
 800358c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003590:	fa22 f103 	lsr.w	r1, r2, r3
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	429a      	cmp	r2, r3
 800359a:	d13e      	bne.n	800361a <__ieee754_pow+0x10a>
 800359c:	f001 0101 	and.w	r1, r1, #1
 80035a0:	f1c1 0b02 	rsb	fp, r1, #2
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d15b      	bne.n	8003660 <__ieee754_pow+0x150>
 80035a8:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <__ieee754_pow+0x208>)
 80035aa:	4598      	cmp	r8, r3
 80035ac:	d124      	bne.n	80035f8 <__ieee754_pow+0xe8>
 80035ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80035b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80035b6:	ea53 030a 	orrs.w	r3, r3, sl
 80035ba:	f000 8478 	beq.w	8003eae <__ieee754_pow+0x99e>
 80035be:	4b59      	ldr	r3, [pc, #356]	; (8003724 <__ieee754_pow+0x214>)
 80035c0:	429c      	cmp	r4, r3
 80035c2:	dd2d      	ble.n	8003620 <__ieee754_pow+0x110>
 80035c4:	f1b9 0f00 	cmp.w	r9, #0
 80035c8:	f280 8475 	bge.w	8003eb6 <__ieee754_pow+0x9a6>
 80035cc:	2000      	movs	r0, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	ec41 0b10 	vmov	d0, r0, r1
 80035d4:	b011      	add	sp, #68	; 0x44
 80035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035da:	2a00      	cmp	r2, #0
 80035dc:	d13e      	bne.n	800365c <__ieee754_pow+0x14c>
 80035de:	f1c3 0314 	rsb	r3, r3, #20
 80035e2:	fa48 f103 	asr.w	r1, r8, r3
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	4598      	cmp	r8, r3
 80035ec:	f040 846b 	bne.w	8003ec6 <__ieee754_pow+0x9b6>
 80035f0:	f001 0101 	and.w	r1, r1, #1
 80035f4:	f1c1 0b02 	rsb	fp, r1, #2
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <__ieee754_pow+0x218>)
 80035fa:	4598      	cmp	r8, r3
 80035fc:	d118      	bne.n	8003630 <__ieee754_pow+0x120>
 80035fe:	f1b9 0f00 	cmp.w	r9, #0
 8003602:	f280 845c 	bge.w	8003ebe <__ieee754_pow+0x9ae>
 8003606:	4948      	ldr	r1, [pc, #288]	; (8003728 <__ieee754_pow+0x218>)
 8003608:	4632      	mov	r2, r6
 800360a:	463b      	mov	r3, r7
 800360c:	2000      	movs	r0, #0
 800360e:	f7fd f8d1 	bl	80007b4 <__aeabi_ddiv>
 8003612:	e7dd      	b.n	80035d0 <__ieee754_pow+0xc0>
 8003614:	f04f 0b02 	mov.w	fp, #2
 8003618:	e7c4      	b.n	80035a4 <__ieee754_pow+0x94>
 800361a:	f04f 0b00 	mov.w	fp, #0
 800361e:	e7c1      	b.n	80035a4 <__ieee754_pow+0x94>
 8003620:	f1b9 0f00 	cmp.w	r9, #0
 8003624:	dad2      	bge.n	80035cc <__ieee754_pow+0xbc>
 8003626:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800362a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800362e:	e7cf      	b.n	80035d0 <__ieee754_pow+0xc0>
 8003630:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003634:	d106      	bne.n	8003644 <__ieee754_pow+0x134>
 8003636:	4632      	mov	r2, r6
 8003638:	463b      	mov	r3, r7
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fc ff8f 	bl	8000560 <__aeabi_dmul>
 8003642:	e7c5      	b.n	80035d0 <__ieee754_pow+0xc0>
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <__ieee754_pow+0x21c>)
 8003646:	4599      	cmp	r9, r3
 8003648:	d10a      	bne.n	8003660 <__ieee754_pow+0x150>
 800364a:	2d00      	cmp	r5, #0
 800364c:	db08      	blt.n	8003660 <__ieee754_pow+0x150>
 800364e:	ec47 6b10 	vmov	d0, r6, r7
 8003652:	b011      	add	sp, #68	; 0x44
 8003654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	f000 bc6c 	b.w	8003f34 <__ieee754_sqrt>
 800365c:	f04f 0b00 	mov.w	fp, #0
 8003660:	ec47 6b10 	vmov	d0, r6, r7
 8003664:	f000 fd16 	bl	8004094 <fabs>
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	f1ba 0f00 	cmp.w	sl, #0
 8003670:	d127      	bne.n	80036c2 <__ieee754_pow+0x1b2>
 8003672:	b124      	cbz	r4, 800367e <__ieee754_pow+0x16e>
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <__ieee754_pow+0x218>)
 8003676:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800367a:	429a      	cmp	r2, r3
 800367c:	d121      	bne.n	80036c2 <__ieee754_pow+0x1b2>
 800367e:	f1b9 0f00 	cmp.w	r9, #0
 8003682:	da05      	bge.n	8003690 <__ieee754_pow+0x180>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	2000      	movs	r0, #0
 800368a:	4927      	ldr	r1, [pc, #156]	; (8003728 <__ieee754_pow+0x218>)
 800368c:	f7fd f892 	bl	80007b4 <__aeabi_ddiv>
 8003690:	2d00      	cmp	r5, #0
 8003692:	da9d      	bge.n	80035d0 <__ieee754_pow+0xc0>
 8003694:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003698:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800369c:	ea54 030b 	orrs.w	r3, r4, fp
 80036a0:	d108      	bne.n	80036b4 <__ieee754_pow+0x1a4>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fc fda5 	bl	80001f8 <__aeabi_dsub>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	e7ac      	b.n	800360e <__ieee754_pow+0xfe>
 80036b4:	f1bb 0f01 	cmp.w	fp, #1
 80036b8:	d18a      	bne.n	80035d0 <__ieee754_pow+0xc0>
 80036ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036be:	4619      	mov	r1, r3
 80036c0:	e786      	b.n	80035d0 <__ieee754_pow+0xc0>
 80036c2:	0fed      	lsrs	r5, r5, #31
 80036c4:	1e6b      	subs	r3, r5, #1
 80036c6:	930d      	str	r3, [sp, #52]	; 0x34
 80036c8:	ea5b 0303 	orrs.w	r3, fp, r3
 80036cc:	d102      	bne.n	80036d4 <__ieee754_pow+0x1c4>
 80036ce:	4632      	mov	r2, r6
 80036d0:	463b      	mov	r3, r7
 80036d2:	e7e8      	b.n	80036a6 <__ieee754_pow+0x196>
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <__ieee754_pow+0x220>)
 80036d6:	4598      	cmp	r8, r3
 80036d8:	f340 80fe 	ble.w	80038d8 <__ieee754_pow+0x3c8>
 80036dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80036e0:	4598      	cmp	r8, r3
 80036e2:	dd0a      	ble.n	80036fa <__ieee754_pow+0x1ea>
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <__ieee754_pow+0x214>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	dc0d      	bgt.n	8003706 <__ieee754_pow+0x1f6>
 80036ea:	f1b9 0f00 	cmp.w	r9, #0
 80036ee:	f6bf af6d 	bge.w	80035cc <__ieee754_pow+0xbc>
 80036f2:	a307      	add	r3, pc, #28	; (adr r3, 8003710 <__ieee754_pow+0x200>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	e79f      	b.n	800363a <__ieee754_pow+0x12a>
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <__ieee754_pow+0x224>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	ddf4      	ble.n	80036ea <__ieee754_pow+0x1da>
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <__ieee754_pow+0x218>)
 8003702:	429c      	cmp	r4, r3
 8003704:	dd18      	ble.n	8003738 <__ieee754_pow+0x228>
 8003706:	f1b9 0f00 	cmp.w	r9, #0
 800370a:	dcf2      	bgt.n	80036f2 <__ieee754_pow+0x1e2>
 800370c:	e75e      	b.n	80035cc <__ieee754_pow+0xbc>
 800370e:	bf00      	nop
 8003710:	8800759c 	.word	0x8800759c
 8003714:	7e37e43c 	.word	0x7e37e43c
 8003718:	7ff00000 	.word	0x7ff00000
 800371c:	08004369 	.word	0x08004369
 8003720:	433fffff 	.word	0x433fffff
 8003724:	3fefffff 	.word	0x3fefffff
 8003728:	3ff00000 	.word	0x3ff00000
 800372c:	3fe00000 	.word	0x3fe00000
 8003730:	41e00000 	.word	0x41e00000
 8003734:	3feffffe 	.word	0x3feffffe
 8003738:	2200      	movs	r2, #0
 800373a:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <__ieee754_pow+0x3b8>)
 800373c:	f7fc fd5c 	bl	80001f8 <__aeabi_dsub>
 8003740:	a355      	add	r3, pc, #340	; (adr r3, 8003898 <__ieee754_pow+0x388>)
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	4604      	mov	r4, r0
 8003748:	460d      	mov	r5, r1
 800374a:	f7fc ff09 	bl	8000560 <__aeabi_dmul>
 800374e:	a354      	add	r3, pc, #336	; (adr r3, 80038a0 <__ieee754_pow+0x390>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc ff00 	bl	8000560 <__aeabi_dmul>
 8003760:	2200      	movs	r2, #0
 8003762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003766:	4b59      	ldr	r3, [pc, #356]	; (80038cc <__ieee754_pow+0x3bc>)
 8003768:	4620      	mov	r0, r4
 800376a:	4629      	mov	r1, r5
 800376c:	f7fc fef8 	bl	8000560 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	a14c      	add	r1, pc, #304	; (adr r1, 80038a8 <__ieee754_pow+0x398>)
 8003776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800377a:	f7fc fd3d 	bl	80001f8 <__aeabi_dsub>
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f7fc feed 	bl	8000560 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	2000      	movs	r0, #0
 800378c:	4950      	ldr	r1, [pc, #320]	; (80038d0 <__ieee754_pow+0x3c0>)
 800378e:	f7fc fd33 	bl	80001f8 <__aeabi_dsub>
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	4680      	mov	r8, r0
 8003798:	4689      	mov	r9, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc fedf 	bl	8000560 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4640      	mov	r0, r8
 80037a8:	4649      	mov	r1, r9
 80037aa:	f7fc fed9 	bl	8000560 <__aeabi_dmul>
 80037ae:	a340      	add	r3, pc, #256	; (adr r3, 80038b0 <__ieee754_pow+0x3a0>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc fed4 	bl	8000560 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037c0:	f7fc fd1a 	bl	80001f8 <__aeabi_dsub>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4604      	mov	r4, r0
 80037ca:	460d      	mov	r5, r1
 80037cc:	4630      	mov	r0, r6
 80037ce:	4639      	mov	r1, r7
 80037d0:	f7fc fd14 	bl	80001fc <__adddf3>
 80037d4:	2000      	movs	r0, #0
 80037d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037da:	4632      	mov	r2, r6
 80037dc:	463b      	mov	r3, r7
 80037de:	f7fc fd0b 	bl	80001f8 <__aeabi_dsub>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fc fd05 	bl	80001f8 <__aeabi_dsub>
 80037ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4606      	mov	r6, r0
 80037f8:	460f      	mov	r7, r1
 80037fa:	f040 81eb 	bne.w	8003bd4 <__ieee754_pow+0x6c4>
 80037fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80038b8 <__ieee754_pow+0x3a8>
 8003802:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003806:	2400      	movs	r4, #0
 8003808:	4622      	mov	r2, r4
 800380a:	462b      	mov	r3, r5
 800380c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003810:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003814:	f7fc fcf0 	bl	80001f8 <__aeabi_dsub>
 8003818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800381c:	f7fc fea0 	bl	8000560 <__aeabi_dmul>
 8003820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003824:	4680      	mov	r8, r0
 8003826:	4689      	mov	r9, r1
 8003828:	4630      	mov	r0, r6
 800382a:	4639      	mov	r1, r7
 800382c:	f7fc fe98 	bl	8000560 <__aeabi_dmul>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4640      	mov	r0, r8
 8003836:	4649      	mov	r1, r9
 8003838:	f7fc fce0 	bl	80001fc <__adddf3>
 800383c:	4622      	mov	r2, r4
 800383e:	462b      	mov	r3, r5
 8003840:	4680      	mov	r8, r0
 8003842:	4689      	mov	r9, r1
 8003844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003848:	f7fc fe8a 	bl	8000560 <__aeabi_dmul>
 800384c:	460b      	mov	r3, r1
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1
 8003852:	4602      	mov	r2, r0
 8003854:	4649      	mov	r1, r9
 8003856:	4640      	mov	r0, r8
 8003858:	e9cd 4500 	strd	r4, r5, [sp]
 800385c:	f7fc fcce 	bl	80001fc <__adddf3>
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <__ieee754_pow+0x3c4>)
 8003862:	4299      	cmp	r1, r3
 8003864:	4606      	mov	r6, r0
 8003866:	460f      	mov	r7, r1
 8003868:	468b      	mov	fp, r1
 800386a:	f340 82f7 	ble.w	8003e5c <__ieee754_pow+0x94c>
 800386e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003872:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003876:	4303      	orrs	r3, r0
 8003878:	f000 81ea 	beq.w	8003c50 <__ieee754_pow+0x740>
 800387c:	a310      	add	r3, pc, #64	; (adr r3, 80038c0 <__ieee754_pow+0x3b0>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003886:	f7fc fe6b 	bl	8000560 <__aeabi_dmul>
 800388a:	a30d      	add	r3, pc, #52	; (adr r3, 80038c0 <__ieee754_pow+0x3b0>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	e6d5      	b.n	800363e <__ieee754_pow+0x12e>
 8003892:	bf00      	nop
 8003894:	f3af 8000 	nop.w
 8003898:	60000000 	.word	0x60000000
 800389c:	3ff71547 	.word	0x3ff71547
 80038a0:	f85ddf44 	.word	0xf85ddf44
 80038a4:	3e54ae0b 	.word	0x3e54ae0b
 80038a8:	55555555 	.word	0x55555555
 80038ac:	3fd55555 	.word	0x3fd55555
 80038b0:	652b82fe 	.word	0x652b82fe
 80038b4:	3ff71547 	.word	0x3ff71547
 80038b8:	00000000 	.word	0x00000000
 80038bc:	bff00000 	.word	0xbff00000
 80038c0:	8800759c 	.word	0x8800759c
 80038c4:	7e37e43c 	.word	0x7e37e43c
 80038c8:	3ff00000 	.word	0x3ff00000
 80038cc:	3fd00000 	.word	0x3fd00000
 80038d0:	3fe00000 	.word	0x3fe00000
 80038d4:	408fffff 	.word	0x408fffff
 80038d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	da05      	bge.n	80038ee <__ieee754_pow+0x3de>
 80038e2:	4bd3      	ldr	r3, [pc, #844]	; (8003c30 <__ieee754_pow+0x720>)
 80038e4:	f7fc fe3c 	bl	8000560 <__aeabi_dmul>
 80038e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80038ec:	460c      	mov	r4, r1
 80038ee:	1523      	asrs	r3, r4, #20
 80038f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80038f4:	4413      	add	r3, r2
 80038f6:	9307      	str	r3, [sp, #28]
 80038f8:	4bce      	ldr	r3, [pc, #824]	; (8003c34 <__ieee754_pow+0x724>)
 80038fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80038fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003902:	429c      	cmp	r4, r3
 8003904:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003908:	dd08      	ble.n	800391c <__ieee754_pow+0x40c>
 800390a:	4bcb      	ldr	r3, [pc, #812]	; (8003c38 <__ieee754_pow+0x728>)
 800390c:	429c      	cmp	r4, r3
 800390e:	f340 815e 	ble.w	8003bce <__ieee754_pow+0x6be>
 8003912:	9b07      	ldr	r3, [sp, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	9307      	str	r3, [sp, #28]
 8003918:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800391c:	f04f 0a00 	mov.w	sl, #0
 8003920:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003924:	930c      	str	r3, [sp, #48]	; 0x30
 8003926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003928:	4bc4      	ldr	r3, [pc, #784]	; (8003c3c <__ieee754_pow+0x72c>)
 800392a:	4413      	add	r3, r2
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	4629      	mov	r1, r5
 8003932:	ec53 2b17 	vmov	r2, r3, d7
 8003936:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800393a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800393e:	f7fc fc5b 	bl	80001f8 <__aeabi_dsub>
 8003942:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003946:	4606      	mov	r6, r0
 8003948:	460f      	mov	r7, r1
 800394a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800394e:	f7fc fc55 	bl	80001fc <__adddf3>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	2000      	movs	r0, #0
 8003958:	49b9      	ldr	r1, [pc, #740]	; (8003c40 <__ieee754_pow+0x730>)
 800395a:	f7fc ff2b 	bl	80007b4 <__aeabi_ddiv>
 800395e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4630      	mov	r0, r6
 8003968:	4639      	mov	r1, r7
 800396a:	f7fc fdf9 	bl	8000560 <__aeabi_dmul>
 800396e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003972:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800397a:	2300      	movs	r3, #0
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003982:	106d      	asrs	r5, r5, #1
 8003984:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003988:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800398c:	2200      	movs	r2, #0
 800398e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	4614      	mov	r4, r2
 8003998:	461d      	mov	r5, r3
 800399a:	f7fc fde1 	bl	8000560 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4630      	mov	r0, r6
 80039a4:	4639      	mov	r1, r7
 80039a6:	f7fc fc27 	bl	80001f8 <__aeabi_dsub>
 80039aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039ae:	4606      	mov	r6, r0
 80039b0:	460f      	mov	r7, r1
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7fc fc1f 	bl	80001f8 <__aeabi_dsub>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80039c2:	f7fc fc19 	bl	80001f8 <__aeabi_dsub>
 80039c6:	4642      	mov	r2, r8
 80039c8:	464b      	mov	r3, r9
 80039ca:	f7fc fdc9 	bl	8000560 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4630      	mov	r0, r6
 80039d4:	4639      	mov	r1, r7
 80039d6:	f7fc fc0f 	bl	80001f8 <__aeabi_dsub>
 80039da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80039de:	f7fc fdbf 	bl	8000560 <__aeabi_dmul>
 80039e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fc fdb7 	bl	8000560 <__aeabi_dmul>
 80039f2:	a37b      	add	r3, pc, #492	; (adr r3, 8003be0 <__ieee754_pow+0x6d0>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	f7fc fdb0 	bl	8000560 <__aeabi_dmul>
 8003a00:	a379      	add	r3, pc, #484	; (adr r3, 8003be8 <__ieee754_pow+0x6d8>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fbf9 	bl	80001fc <__adddf3>
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	f7fc fda7 	bl	8000560 <__aeabi_dmul>
 8003a12:	a377      	add	r3, pc, #476	; (adr r3, 8003bf0 <__ieee754_pow+0x6e0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fbf0 	bl	80001fc <__adddf3>
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	462b      	mov	r3, r5
 8003a20:	f7fc fd9e 	bl	8000560 <__aeabi_dmul>
 8003a24:	a374      	add	r3, pc, #464	; (adr r3, 8003bf8 <__ieee754_pow+0x6e8>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	f7fc fbe7 	bl	80001fc <__adddf3>
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	f7fc fd95 	bl	8000560 <__aeabi_dmul>
 8003a36:	a372      	add	r3, pc, #456	; (adr r3, 8003c00 <__ieee754_pow+0x6f0>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f7fc fbde 	bl	80001fc <__adddf3>
 8003a40:	4622      	mov	r2, r4
 8003a42:	462b      	mov	r3, r5
 8003a44:	f7fc fd8c 	bl	8000560 <__aeabi_dmul>
 8003a48:	a36f      	add	r3, pc, #444	; (adr r3, 8003c08 <__ieee754_pow+0x6f8>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fc fbd5 	bl	80001fc <__adddf3>
 8003a52:	4622      	mov	r2, r4
 8003a54:	4606      	mov	r6, r0
 8003a56:	460f      	mov	r7, r1
 8003a58:	462b      	mov	r3, r5
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fd7f 	bl	8000560 <__aeabi_dmul>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4630      	mov	r0, r6
 8003a68:	4639      	mov	r1, r7
 8003a6a:	f7fc fd79 	bl	8000560 <__aeabi_dmul>
 8003a6e:	4642      	mov	r2, r8
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	464b      	mov	r3, r9
 8003a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a7a:	f7fc fbbf 	bl	80001fc <__adddf3>
 8003a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a82:	f7fc fd6d 	bl	8000560 <__aeabi_dmul>
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f7fc fbb7 	bl	80001fc <__adddf3>
 8003a8e:	4642      	mov	r2, r8
 8003a90:	4606      	mov	r6, r0
 8003a92:	460f      	mov	r7, r1
 8003a94:	464b      	mov	r3, r9
 8003a96:	4640      	mov	r0, r8
 8003a98:	4649      	mov	r1, r9
 8003a9a:	f7fc fd61 	bl	8000560 <__aeabi_dmul>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4b68      	ldr	r3, [pc, #416]	; (8003c44 <__ieee754_pow+0x734>)
 8003aa2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003aa6:	f7fc fba9 	bl	80001fc <__adddf3>
 8003aaa:	4632      	mov	r2, r6
 8003aac:	463b      	mov	r3, r7
 8003aae:	f7fc fba5 	bl	80001fc <__adddf3>
 8003ab2:	9802      	ldr	r0, [sp, #8]
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4640      	mov	r0, r8
 8003abe:	4649      	mov	r1, r9
 8003ac0:	f7fc fd4e 	bl	8000560 <__aeabi_dmul>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4680      	mov	r8, r0
 8003ac8:	4689      	mov	r9, r1
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <__ieee754_pow+0x734>)
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fb92 	bl	80001f8 <__aeabi_dsub>
 8003ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ad8:	f7fc fb8e 	bl	80001f8 <__aeabi_dsub>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	4639      	mov	r1, r7
 8003ae4:	f7fc fb88 	bl	80001f8 <__aeabi_dsub>
 8003ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aec:	f7fc fd38 	bl	8000560 <__aeabi_dmul>
 8003af0:	4622      	mov	r2, r4
 8003af2:	4606      	mov	r6, r0
 8003af4:	460f      	mov	r7, r1
 8003af6:	462b      	mov	r3, r5
 8003af8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003afc:	f7fc fd30 	bl	8000560 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4630      	mov	r0, r6
 8003b06:	4639      	mov	r1, r7
 8003b08:	f7fc fb78 	bl	80001fc <__adddf3>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	460f      	mov	r7, r1
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4640      	mov	r0, r8
 8003b16:	4649      	mov	r1, r9
 8003b18:	f7fc fb70 	bl	80001fc <__adddf3>
 8003b1c:	9802      	ldr	r0, [sp, #8]
 8003b1e:	a33c      	add	r3, pc, #240	; (adr r3, 8003c10 <__ieee754_pow+0x700>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	4604      	mov	r4, r0
 8003b26:	460d      	mov	r5, r1
 8003b28:	f7fc fd1a 	bl	8000560 <__aeabi_dmul>
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b32:	464b      	mov	r3, r9
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fb5e 	bl	80001f8 <__aeabi_dsub>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4630      	mov	r0, r6
 8003b42:	4639      	mov	r1, r7
 8003b44:	f7fc fb58 	bl	80001f8 <__aeabi_dsub>
 8003b48:	a333      	add	r3, pc, #204	; (adr r3, 8003c18 <__ieee754_pow+0x708>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fd07 	bl	8000560 <__aeabi_dmul>
 8003b52:	a333      	add	r3, pc, #204	; (adr r3, 8003c20 <__ieee754_pow+0x710>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460f      	mov	r7, r1
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fcfe 	bl	8000560 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4630      	mov	r0, r6
 8003b6a:	4639      	mov	r1, r7
 8003b6c:	f7fc fb46 	bl	80001fc <__adddf3>
 8003b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b72:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <__ieee754_pow+0x738>)
 8003b74:	4413      	add	r3, r2
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f7fc fb3f 	bl	80001fc <__adddf3>
 8003b7e:	4604      	mov	r4, r0
 8003b80:	9807      	ldr	r0, [sp, #28]
 8003b82:	460d      	mov	r5, r1
 8003b84:	f7fc fc86 	bl	8000494 <__aeabi_i2d>
 8003b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <__ieee754_pow+0x73c>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b92:	4606      	mov	r6, r0
 8003b94:	460f      	mov	r7, r1
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003b9e:	f7fc fb2d 	bl	80001fc <__adddf3>
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	f7fc fb29 	bl	80001fc <__adddf3>
 8003baa:	4632      	mov	r2, r6
 8003bac:	463b      	mov	r3, r7
 8003bae:	f7fc fb25 	bl	80001fc <__adddf3>
 8003bb2:	9802      	ldr	r0, [sp, #8]
 8003bb4:	4632      	mov	r2, r6
 8003bb6:	463b      	mov	r3, r7
 8003bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bbc:	f7fc fb1c 	bl	80001f8 <__aeabi_dsub>
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	f7fc fb18 	bl	80001f8 <__aeabi_dsub>
 8003bc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bcc:	e607      	b.n	80037de <__ieee754_pow+0x2ce>
 8003bce:	f04f 0a01 	mov.w	sl, #1
 8003bd2:	e6a5      	b.n	8003920 <__ieee754_pow+0x410>
 8003bd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003c28 <__ieee754_pow+0x718>
 8003bd8:	e613      	b.n	8003802 <__ieee754_pow+0x2f2>
 8003bda:	bf00      	nop
 8003bdc:	f3af 8000 	nop.w
 8003be0:	4a454eef 	.word	0x4a454eef
 8003be4:	3fca7e28 	.word	0x3fca7e28
 8003be8:	93c9db65 	.word	0x93c9db65
 8003bec:	3fcd864a 	.word	0x3fcd864a
 8003bf0:	a91d4101 	.word	0xa91d4101
 8003bf4:	3fd17460 	.word	0x3fd17460
 8003bf8:	518f264d 	.word	0x518f264d
 8003bfc:	3fd55555 	.word	0x3fd55555
 8003c00:	db6fabff 	.word	0xdb6fabff
 8003c04:	3fdb6db6 	.word	0x3fdb6db6
 8003c08:	33333303 	.word	0x33333303
 8003c0c:	3fe33333 	.word	0x3fe33333
 8003c10:	e0000000 	.word	0xe0000000
 8003c14:	3feec709 	.word	0x3feec709
 8003c18:	dc3a03fd 	.word	0xdc3a03fd
 8003c1c:	3feec709 	.word	0x3feec709
 8003c20:	145b01f5 	.word	0x145b01f5
 8003c24:	be3e2fe0 	.word	0xbe3e2fe0
 8003c28:	00000000 	.word	0x00000000
 8003c2c:	3ff00000 	.word	0x3ff00000
 8003c30:	43400000 	.word	0x43400000
 8003c34:	0003988e 	.word	0x0003988e
 8003c38:	000bb679 	.word	0x000bb679
 8003c3c:	080043f0 	.word	0x080043f0
 8003c40:	3ff00000 	.word	0x3ff00000
 8003c44:	40080000 	.word	0x40080000
 8003c48:	08004410 	.word	0x08004410
 8003c4c:	08004400 	.word	0x08004400
 8003c50:	a3b6      	add	r3, pc, #728	; (adr r3, 8003f2c <__ieee754_pow+0xa1c>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	4640      	mov	r0, r8
 8003c58:	4649      	mov	r1, r9
 8003c5a:	f7fc facf 	bl	80001fc <__adddf3>
 8003c5e:	4622      	mov	r2, r4
 8003c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c64:	462b      	mov	r3, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc fac5 	bl	80001f8 <__aeabi_dsub>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c76:	f7fc ff03 	bl	8000a80 <__aeabi_dcmpgt>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	f47f adfe 	bne.w	800387c <__ieee754_pow+0x36c>
 8003c80:	4aa5      	ldr	r2, [pc, #660]	; (8003f18 <__ieee754_pow+0xa08>)
 8003c82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f340 810c 	ble.w	8003ea4 <__ieee754_pow+0x994>
 8003c8c:	151b      	asrs	r3, r3, #20
 8003c8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003c92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003c96:	fa4a f303 	asr.w	r3, sl, r3
 8003c9a:	445b      	add	r3, fp
 8003c9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003ca0:	4e9e      	ldr	r6, [pc, #632]	; (8003f1c <__ieee754_pow+0xa0c>)
 8003ca2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003ca6:	4116      	asrs	r6, r2
 8003ca8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003cac:	2000      	movs	r0, #0
 8003cae:	ea23 0106 	bic.w	r1, r3, r6
 8003cb2:	f1c2 0214 	rsb	r2, r2, #20
 8003cb6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003cba:	fa4a fa02 	asr.w	sl, sl, r2
 8003cbe:	f1bb 0f00 	cmp.w	fp, #0
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4629      	mov	r1, r5
 8003cca:	bfb8      	it	lt
 8003ccc:	f1ca 0a00 	rsblt	sl, sl, #0
 8003cd0:	f7fc fa92 	bl	80001f8 <__aeabi_dsub>
 8003cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ce0:	f7fc fa8c 	bl	80001fc <__adddf3>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	a37a      	add	r3, pc, #488	; (adr r3, 8003ed0 <__ieee754_pow+0x9c0>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
 8003cf0:	f7fc fc36 	bl	8000560 <__aeabi_dmul>
 8003cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	460f      	mov	r7, r1
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f7fc fa7a 	bl	80001f8 <__aeabi_dsub>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4640      	mov	r0, r8
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	f7fc fa74 	bl	80001f8 <__aeabi_dsub>
 8003d10:	a371      	add	r3, pc, #452	; (adr r3, 8003ed8 <__ieee754_pow+0x9c8>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fc23 	bl	8000560 <__aeabi_dmul>
 8003d1a:	a371      	add	r3, pc, #452	; (adr r3, 8003ee0 <__ieee754_pow+0x9d0>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	4680      	mov	r8, r0
 8003d22:	4689      	mov	r9, r1
 8003d24:	4620      	mov	r0, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	f7fc fc1a 	bl	8000560 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4640      	mov	r0, r8
 8003d32:	4649      	mov	r1, r9
 8003d34:	f7fc fa62 	bl	80001fc <__adddf3>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4630      	mov	r0, r6
 8003d42:	4639      	mov	r1, r7
 8003d44:	f7fc fa5a 	bl	80001fc <__adddf3>
 8003d48:	4632      	mov	r2, r6
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	4689      	mov	r9, r1
 8003d50:	f7fc fa52 	bl	80001f8 <__aeabi_dsub>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f7fc fa4c 	bl	80001f8 <__aeabi_dsub>
 8003d60:	4642      	mov	r2, r8
 8003d62:	4606      	mov	r6, r0
 8003d64:	460f      	mov	r7, r1
 8003d66:	464b      	mov	r3, r9
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	f7fc fbf8 	bl	8000560 <__aeabi_dmul>
 8003d70:	a35d      	add	r3, pc, #372	; (adr r3, 8003ee8 <__ieee754_pow+0x9d8>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	4604      	mov	r4, r0
 8003d78:	460d      	mov	r5, r1
 8003d7a:	f7fc fbf1 	bl	8000560 <__aeabi_dmul>
 8003d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8003ef0 <__ieee754_pow+0x9e0>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fa38 	bl	80001f8 <__aeabi_dsub>
 8003d88:	4622      	mov	r2, r4
 8003d8a:	462b      	mov	r3, r5
 8003d8c:	f7fc fbe8 	bl	8000560 <__aeabi_dmul>
 8003d90:	a359      	add	r3, pc, #356	; (adr r3, 8003ef8 <__ieee754_pow+0x9e8>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fa31 	bl	80001fc <__adddf3>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	f7fc fbdf 	bl	8000560 <__aeabi_dmul>
 8003da2:	a357      	add	r3, pc, #348	; (adr r3, 8003f00 <__ieee754_pow+0x9f0>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f7fc fa26 	bl	80001f8 <__aeabi_dsub>
 8003dac:	4622      	mov	r2, r4
 8003dae:	462b      	mov	r3, r5
 8003db0:	f7fc fbd6 	bl	8000560 <__aeabi_dmul>
 8003db4:	a354      	add	r3, pc, #336	; (adr r3, 8003f08 <__ieee754_pow+0x9f8>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f7fc fa1f 	bl	80001fc <__adddf3>
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	f7fc fbcd 	bl	8000560 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fa13 	bl	80001f8 <__aeabi_dsub>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	460d      	mov	r5, r1
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	f7fc fbbf 	bl	8000560 <__aeabi_dmul>
 8003de2:	2200      	movs	r2, #0
 8003de4:	e9cd 0100 	strd	r0, r1, [sp]
 8003de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc fa02 	bl	80001f8 <__aeabi_dsub>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dfc:	f7fc fcda 	bl	80007b4 <__aeabi_ddiv>
 8003e00:	4632      	mov	r2, r6
 8003e02:	4604      	mov	r4, r0
 8003e04:	460d      	mov	r5, r1
 8003e06:	463b      	mov	r3, r7
 8003e08:	4640      	mov	r0, r8
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	f7fc fba8 	bl	8000560 <__aeabi_dmul>
 8003e10:	4632      	mov	r2, r6
 8003e12:	463b      	mov	r3, r7
 8003e14:	f7fc f9f2 	bl	80001fc <__adddf3>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc f9ea 	bl	80001f8 <__aeabi_dsub>
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	f7fc f9e6 	bl	80001f8 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	2000      	movs	r0, #0
 8003e32:	493b      	ldr	r1, [pc, #236]	; (8003f20 <__ieee754_pow+0xa10>)
 8003e34:	f7fc f9e0 	bl	80001f8 <__aeabi_dsub>
 8003e38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003e3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	da31      	bge.n	8003eaa <__ieee754_pow+0x99a>
 8003e46:	4650      	mov	r0, sl
 8003e48:	ec43 2b10 	vmov	d0, r2, r3
 8003e4c:	f000 f9c4 	bl	80041d8 <scalbn>
 8003e50:	ec51 0b10 	vmov	r0, r1, d0
 8003e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e58:	f7ff bbf1 	b.w	800363e <__ieee754_pow+0x12e>
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <__ieee754_pow+0xa14>)
 8003e5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003e62:	429e      	cmp	r6, r3
 8003e64:	f77f af0c 	ble.w	8003c80 <__ieee754_pow+0x770>
 8003e68:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <__ieee754_pow+0xa18>)
 8003e6a:	440b      	add	r3, r1
 8003e6c:	4303      	orrs	r3, r0
 8003e6e:	d00b      	beq.n	8003e88 <__ieee754_pow+0x978>
 8003e70:	a327      	add	r3, pc, #156	; (adr r3, 8003f10 <__ieee754_pow+0xa00>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7a:	f7fc fb71 	bl	8000560 <__aeabi_dmul>
 8003e7e:	a324      	add	r3, pc, #144	; (adr r3, 8003f10 <__ieee754_pow+0xa00>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7ff bbdb 	b.w	800363e <__ieee754_pow+0x12e>
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	f7fc f9b4 	bl	80001f8 <__aeabi_dsub>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4640      	mov	r0, r8
 8003e96:	4649      	mov	r1, r9
 8003e98:	f7fc fdde 	bl	8000a58 <__aeabi_dcmple>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	f43f aeef 	beq.w	8003c80 <__ieee754_pow+0x770>
 8003ea2:	e7e5      	b.n	8003e70 <__ieee754_pow+0x960>
 8003ea4:	f04f 0a00 	mov.w	sl, #0
 8003ea8:	e716      	b.n	8003cd8 <__ieee754_pow+0x7c8>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	e7d2      	b.n	8003e54 <__ieee754_pow+0x944>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	491b      	ldr	r1, [pc, #108]	; (8003f20 <__ieee754_pow+0xa10>)
 8003eb2:	f7ff bb8d 	b.w	80035d0 <__ieee754_pow+0xc0>
 8003eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eba:	f7ff bb89 	b.w	80035d0 <__ieee754_pow+0xc0>
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	f7ff bb85 	b.w	80035d0 <__ieee754_pow+0xc0>
 8003ec6:	4693      	mov	fp, r2
 8003ec8:	f7ff bb96 	b.w	80035f8 <__ieee754_pow+0xe8>
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	00000000 	.word	0x00000000
 8003ed4:	3fe62e43 	.word	0x3fe62e43
 8003ed8:	fefa39ef 	.word	0xfefa39ef
 8003edc:	3fe62e42 	.word	0x3fe62e42
 8003ee0:	0ca86c39 	.word	0x0ca86c39
 8003ee4:	be205c61 	.word	0xbe205c61
 8003ee8:	72bea4d0 	.word	0x72bea4d0
 8003eec:	3e663769 	.word	0x3e663769
 8003ef0:	c5d26bf1 	.word	0xc5d26bf1
 8003ef4:	3ebbbd41 	.word	0x3ebbbd41
 8003ef8:	af25de2c 	.word	0xaf25de2c
 8003efc:	3f11566a 	.word	0x3f11566a
 8003f00:	16bebd93 	.word	0x16bebd93
 8003f04:	3f66c16c 	.word	0x3f66c16c
 8003f08:	5555553e 	.word	0x5555553e
 8003f0c:	3fc55555 	.word	0x3fc55555
 8003f10:	c2f8f359 	.word	0xc2f8f359
 8003f14:	01a56e1f 	.word	0x01a56e1f
 8003f18:	3fe00000 	.word	0x3fe00000
 8003f1c:	000fffff 	.word	0x000fffff
 8003f20:	3ff00000 	.word	0x3ff00000
 8003f24:	4090cbff 	.word	0x4090cbff
 8003f28:	3f6f3400 	.word	0x3f6f3400
 8003f2c:	652b82fe 	.word	0x652b82fe
 8003f30:	3c971547 	.word	0x3c971547

08003f34 <__ieee754_sqrt>:
 8003f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f38:	ec55 4b10 	vmov	r4, r5, d0
 8003f3c:	4e54      	ldr	r6, [pc, #336]	; (8004090 <__ieee754_sqrt+0x15c>)
 8003f3e:	43ae      	bics	r6, r5
 8003f40:	ee10 0a10 	vmov	r0, s0
 8003f44:	462b      	mov	r3, r5
 8003f46:	462a      	mov	r2, r5
 8003f48:	4621      	mov	r1, r4
 8003f4a:	d113      	bne.n	8003f74 <__ieee754_sqrt+0x40>
 8003f4c:	ee10 2a10 	vmov	r2, s0
 8003f50:	462b      	mov	r3, r5
 8003f52:	ee10 0a10 	vmov	r0, s0
 8003f56:	4629      	mov	r1, r5
 8003f58:	f7fc fb02 	bl	8000560 <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4620      	mov	r0, r4
 8003f62:	4629      	mov	r1, r5
 8003f64:	f7fc f94a 	bl	80001fc <__adddf3>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	ec45 4b10 	vmov	d0, r4, r5
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	dc10      	bgt.n	8003f9a <__ieee754_sqrt+0x66>
 8003f78:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003f7c:	4330      	orrs	r0, r6
 8003f7e:	d0f5      	beq.n	8003f6c <__ieee754_sqrt+0x38>
 8003f80:	b15d      	cbz	r5, 8003f9a <__ieee754_sqrt+0x66>
 8003f82:	ee10 2a10 	vmov	r2, s0
 8003f86:	462b      	mov	r3, r5
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7fc f934 	bl	80001f8 <__aeabi_dsub>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	f7fc fc0e 	bl	80007b4 <__aeabi_ddiv>
 8003f98:	e7e6      	b.n	8003f68 <__ieee754_sqrt+0x34>
 8003f9a:	151b      	asrs	r3, r3, #20
 8003f9c:	d10c      	bne.n	8003fb8 <__ieee754_sqrt+0x84>
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	d06d      	beq.n	800407e <__ieee754_sqrt+0x14a>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	02d6      	lsls	r6, r2, #11
 8003fa6:	d56e      	bpl.n	8004086 <__ieee754_sqrt+0x152>
 8003fa8:	1e44      	subs	r4, r0, #1
 8003faa:	1b1b      	subs	r3, r3, r4
 8003fac:	f1c0 0420 	rsb	r4, r0, #32
 8003fb0:	fa21 f404 	lsr.w	r4, r1, r4
 8003fb4:	4322      	orrs	r2, r4
 8003fb6:	4081      	lsls	r1, r0
 8003fb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003fbc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003fc0:	07dd      	lsls	r5, r3, #31
 8003fc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fc6:	bf42      	ittt	mi
 8003fc8:	0052      	lslmi	r2, r2, #1
 8003fca:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003fce:	0049      	lslmi	r1, r1, #1
 8003fd0:	1058      	asrs	r0, r3, #1
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003fd8:	441a      	add	r2, r3
 8003fda:	0049      	lsls	r1, r1, #1
 8003fdc:	2316      	movs	r3, #22
 8003fde:	462c      	mov	r4, r5
 8003fe0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003fe4:	19a7      	adds	r7, r4, r6
 8003fe6:	4297      	cmp	r7, r2
 8003fe8:	bfde      	ittt	le
 8003fea:	1bd2      	suble	r2, r2, r7
 8003fec:	19bc      	addle	r4, r7, r6
 8003fee:	19ad      	addle	r5, r5, r6
 8003ff0:	0052      	lsls	r2, r2, #1
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003ff8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003ffc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004000:	d1f0      	bne.n	8003fe4 <__ieee754_sqrt+0xb0>
 8004002:	f04f 0e20 	mov.w	lr, #32
 8004006:	469c      	mov	ip, r3
 8004008:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800400c:	42a2      	cmp	r2, r4
 800400e:	eb06 070c 	add.w	r7, r6, ip
 8004012:	dc02      	bgt.n	800401a <__ieee754_sqrt+0xe6>
 8004014:	d112      	bne.n	800403c <__ieee754_sqrt+0x108>
 8004016:	428f      	cmp	r7, r1
 8004018:	d810      	bhi.n	800403c <__ieee754_sqrt+0x108>
 800401a:	2f00      	cmp	r7, #0
 800401c:	eb07 0c06 	add.w	ip, r7, r6
 8004020:	da34      	bge.n	800408c <__ieee754_sqrt+0x158>
 8004022:	f1bc 0f00 	cmp.w	ip, #0
 8004026:	db31      	blt.n	800408c <__ieee754_sqrt+0x158>
 8004028:	f104 0801 	add.w	r8, r4, #1
 800402c:	1b12      	subs	r2, r2, r4
 800402e:	428f      	cmp	r7, r1
 8004030:	bf88      	it	hi
 8004032:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004036:	1bc9      	subs	r1, r1, r7
 8004038:	4433      	add	r3, r6
 800403a:	4644      	mov	r4, r8
 800403c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004040:	f1be 0e01 	subs.w	lr, lr, #1
 8004044:	443a      	add	r2, r7
 8004046:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800404a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800404e:	d1dd      	bne.n	800400c <__ieee754_sqrt+0xd8>
 8004050:	430a      	orrs	r2, r1
 8004052:	d006      	beq.n	8004062 <__ieee754_sqrt+0x12e>
 8004054:	1c5c      	adds	r4, r3, #1
 8004056:	bf13      	iteet	ne
 8004058:	3301      	addne	r3, #1
 800405a:	3501      	addeq	r5, #1
 800405c:	4673      	moveq	r3, lr
 800405e:	f023 0301 	bicne.w	r3, r3, #1
 8004062:	106a      	asrs	r2, r5, #1
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	07e9      	lsls	r1, r5, #31
 8004068:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800406c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004070:	bf48      	it	mi
 8004072:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004076:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800407a:	461c      	mov	r4, r3
 800407c:	e776      	b.n	8003f6c <__ieee754_sqrt+0x38>
 800407e:	0aca      	lsrs	r2, r1, #11
 8004080:	3b15      	subs	r3, #21
 8004082:	0549      	lsls	r1, r1, #21
 8004084:	e78b      	b.n	8003f9e <__ieee754_sqrt+0x6a>
 8004086:	0052      	lsls	r2, r2, #1
 8004088:	3001      	adds	r0, #1
 800408a:	e78b      	b.n	8003fa4 <__ieee754_sqrt+0x70>
 800408c:	46a0      	mov	r8, r4
 800408e:	e7cd      	b.n	800402c <__ieee754_sqrt+0xf8>
 8004090:	7ff00000 	.word	0x7ff00000

08004094 <fabs>:
 8004094:	ec53 2b10 	vmov	r2, r3, d0
 8004098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800409c:	ec43 2b10 	vmov	d0, r2, r3
 80040a0:	4770      	bx	lr

080040a2 <finite>:
 80040a2:	ee10 3a90 	vmov	r3, s1
 80040a6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80040aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80040ae:	0fc0      	lsrs	r0, r0, #31
 80040b0:	4770      	bx	lr

080040b2 <matherr>:
 80040b2:	2000      	movs	r0, #0
 80040b4:	4770      	bx	lr
	...

080040b8 <nan>:
 80040b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80040c0 <nan+0x8>
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	00000000 	.word	0x00000000
 80040c4:	7ff80000 	.word	0x7ff80000

080040c8 <rint>:
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	ec51 0b10 	vmov	r0, r1, d0
 80040ce:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80040d2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80040d6:	2e13      	cmp	r6, #19
 80040d8:	ee10 7a10 	vmov	r7, s0
 80040dc:	460b      	mov	r3, r1
 80040de:	4602      	mov	r2, r0
 80040e0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80040e4:	dc58      	bgt.n	8004198 <rint+0xd0>
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	da2b      	bge.n	8004142 <rint+0x7a>
 80040ea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80040ee:	4302      	orrs	r2, r0
 80040f0:	d023      	beq.n	800413a <rint+0x72>
 80040f2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80040f6:	4302      	orrs	r2, r0
 80040f8:	4251      	negs	r1, r2
 80040fa:	4311      	orrs	r1, r2
 80040fc:	0b09      	lsrs	r1, r1, #12
 80040fe:	0c5b      	lsrs	r3, r3, #17
 8004100:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8004104:	045b      	lsls	r3, r3, #17
 8004106:	ea41 0703 	orr.w	r7, r1, r3
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <rint+0x108>)
 800410c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004110:	4639      	mov	r1, r7
 8004112:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004116:	ee10 0a10 	vmov	r0, s0
 800411a:	4632      	mov	r2, r6
 800411c:	463b      	mov	r3, r7
 800411e:	f7fc f86d 	bl	80001fc <__adddf3>
 8004122:	e9cd 0100 	strd	r0, r1, [sp]
 8004126:	463b      	mov	r3, r7
 8004128:	4632      	mov	r2, r6
 800412a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800412e:	f7fc f863 	bl	80001f8 <__aeabi_dsub>
 8004132:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004136:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800413a:	ec41 0b10 	vmov	d0, r0, r1
 800413e:	b003      	add	sp, #12
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004142:	4c24      	ldr	r4, [pc, #144]	; (80041d4 <rint+0x10c>)
 8004144:	4134      	asrs	r4, r6
 8004146:	ea01 0704 	and.w	r7, r1, r4
 800414a:	4307      	orrs	r7, r0
 800414c:	d0f5      	beq.n	800413a <rint+0x72>
 800414e:	0861      	lsrs	r1, r4, #1
 8004150:	ea03 0001 	and.w	r0, r3, r1
 8004154:	4302      	orrs	r2, r0
 8004156:	d00b      	beq.n	8004170 <rint+0xa8>
 8004158:	ea23 0101 	bic.w	r1, r3, r1
 800415c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004160:	2e13      	cmp	r6, #19
 8004162:	fa43 f306 	asr.w	r3, r3, r6
 8004166:	bf0c      	ite	eq
 8004168:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800416c:	2200      	movne	r2, #0
 800416e:	430b      	orrs	r3, r1
 8004170:	4619      	mov	r1, r3
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <rint+0x108>)
 8004174:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004178:	e9d5 4500 	ldrd	r4, r5, [r5]
 800417c:	4610      	mov	r0, r2
 800417e:	462b      	mov	r3, r5
 8004180:	4622      	mov	r2, r4
 8004182:	f7fc f83b 	bl	80001fc <__adddf3>
 8004186:	e9cd 0100 	strd	r0, r1, [sp]
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004192:	f7fc f831 	bl	80001f8 <__aeabi_dsub>
 8004196:	e7d0      	b.n	800413a <rint+0x72>
 8004198:	2e33      	cmp	r6, #51	; 0x33
 800419a:	dd08      	ble.n	80041ae <rint+0xe6>
 800419c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80041a0:	d1cb      	bne.n	800413a <rint+0x72>
 80041a2:	ee10 2a10 	vmov	r2, s0
 80041a6:	460b      	mov	r3, r1
 80041a8:	f7fc f828 	bl	80001fc <__adddf3>
 80041ac:	e7c5      	b.n	800413a <rint+0x72>
 80041ae:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80041b2:	f04f 34ff 	mov.w	r4, #4294967295
 80041b6:	40f4      	lsrs	r4, r6
 80041b8:	4220      	tst	r0, r4
 80041ba:	d0be      	beq.n	800413a <rint+0x72>
 80041bc:	0861      	lsrs	r1, r4, #1
 80041be:	420f      	tst	r7, r1
 80041c0:	bf1f      	itttt	ne
 80041c2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80041c6:	ea27 0101 	bicne.w	r1, r7, r1
 80041ca:	4132      	asrne	r2, r6
 80041cc:	430a      	orrne	r2, r1
 80041ce:	e7cf      	b.n	8004170 <rint+0xa8>
 80041d0:	08004420 	.word	0x08004420
 80041d4:	000fffff 	.word	0x000fffff

080041d8 <scalbn>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	ec55 4b10 	vmov	r4, r5, d0
 80041de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80041e2:	4606      	mov	r6, r0
 80041e4:	462b      	mov	r3, r5
 80041e6:	b9b2      	cbnz	r2, 8004216 <scalbn+0x3e>
 80041e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80041ec:	4323      	orrs	r3, r4
 80041ee:	d03c      	beq.n	800426a <scalbn+0x92>
 80041f0:	2200      	movs	r2, #0
 80041f2:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <scalbn+0xe8>)
 80041f4:	4629      	mov	r1, r5
 80041f6:	ee10 0a10 	vmov	r0, s0
 80041fa:	f7fc f9b1 	bl	8000560 <__aeabi_dmul>
 80041fe:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <scalbn+0xec>)
 8004200:	4296      	cmp	r6, r2
 8004202:	4604      	mov	r4, r0
 8004204:	460d      	mov	r5, r1
 8004206:	460b      	mov	r3, r1
 8004208:	da13      	bge.n	8004232 <scalbn+0x5a>
 800420a:	a329      	add	r3, pc, #164	; (adr r3, 80042b0 <scalbn+0xd8>)
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f7fc f9a6 	bl	8000560 <__aeabi_dmul>
 8004214:	e00a      	b.n	800422c <scalbn+0x54>
 8004216:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800421a:	428a      	cmp	r2, r1
 800421c:	d10c      	bne.n	8004238 <scalbn+0x60>
 800421e:	ee10 2a10 	vmov	r2, s0
 8004222:	462b      	mov	r3, r5
 8004224:	4620      	mov	r0, r4
 8004226:	4629      	mov	r1, r5
 8004228:	f7fb ffe8 	bl	80001fc <__adddf3>
 800422c:	4604      	mov	r4, r0
 800422e:	460d      	mov	r5, r1
 8004230:	e01b      	b.n	800426a <scalbn+0x92>
 8004232:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004236:	3a36      	subs	r2, #54	; 0x36
 8004238:	4432      	add	r2, r6
 800423a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800423e:	428a      	cmp	r2, r1
 8004240:	dd0b      	ble.n	800425a <scalbn+0x82>
 8004242:	ec45 4b11 	vmov	d1, r4, r5
 8004246:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80042b8 <scalbn+0xe0>
 800424a:	f000 f83f 	bl	80042cc <copysign>
 800424e:	a31a      	add	r3, pc, #104	; (adr r3, 80042b8 <scalbn+0xe0>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	ec51 0b10 	vmov	r0, r1, d0
 8004258:	e7da      	b.n	8004210 <scalbn+0x38>
 800425a:	2a00      	cmp	r2, #0
 800425c:	dd08      	ble.n	8004270 <scalbn+0x98>
 800425e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004262:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004266:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800426a:	ec45 4b10 	vmov	d0, r4, r5
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004274:	da0d      	bge.n	8004292 <scalbn+0xba>
 8004276:	f24c 3350 	movw	r3, #50000	; 0xc350
 800427a:	429e      	cmp	r6, r3
 800427c:	ec45 4b11 	vmov	d1, r4, r5
 8004280:	dce1      	bgt.n	8004246 <scalbn+0x6e>
 8004282:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80042b0 <scalbn+0xd8>
 8004286:	f000 f821 	bl	80042cc <copysign>
 800428a:	a309      	add	r3, pc, #36	; (adr r3, 80042b0 <scalbn+0xd8>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	e7e0      	b.n	8004254 <scalbn+0x7c>
 8004292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004296:	3236      	adds	r2, #54	; 0x36
 8004298:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800429c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042a0:	4620      	mov	r0, r4
 80042a2:	4629      	mov	r1, r5
 80042a4:	2200      	movs	r2, #0
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <scalbn+0xf0>)
 80042a8:	e7b2      	b.n	8004210 <scalbn+0x38>
 80042aa:	bf00      	nop
 80042ac:	f3af 8000 	nop.w
 80042b0:	c2f8f359 	.word	0xc2f8f359
 80042b4:	01a56e1f 	.word	0x01a56e1f
 80042b8:	8800759c 	.word	0x8800759c
 80042bc:	7e37e43c 	.word	0x7e37e43c
 80042c0:	43500000 	.word	0x43500000
 80042c4:	ffff3cb0 	.word	0xffff3cb0
 80042c8:	3c900000 	.word	0x3c900000

080042cc <copysign>:
 80042cc:	ec53 2b10 	vmov	r2, r3, d0
 80042d0:	ee11 0a90 	vmov	r0, s3
 80042d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80042d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80042dc:	ea41 0300 	orr.w	r3, r1, r0
 80042e0:	ec43 2b10 	vmov	d0, r2, r3
 80042e4:	4770      	bx	lr
	...

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
